(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{24:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"e",(function(){return BINARY_TREE_TYPE})),__webpack_require__.d(__webpack_exports__,"j",(function(){return TREE_ID})),__webpack_require__.d(__webpack_exports__,"f",(function(){return CSS_VARIABLE_MAP})),__webpack_require__.d(__webpack_exports__,"b",(function(){return AVL_TREE_PROPS})),__webpack_require__.d(__webpack_exports__,"i",(function(){return RED_BLACK_TREE_PROPS})),__webpack_require__.d(__webpack_exports__,"d",(function(){return BINARY_SEARCH_TREE_PROPS})),__webpack_require__.d(__webpack_exports__,"h",(function(){return HEAP_PROPS})),__webpack_require__.d(__webpack_exports__,"l",(function(){return TRIE_PROPS})),__webpack_require__.d(__webpack_exports__,"a",(function(){return AVL_HOOK_PROPERTIES})),__webpack_require__.d(__webpack_exports__,"c",(function(){return BINARY_SEARCH_TREE_HOOK_PROPERTIES})),__webpack_require__.d(__webpack_exports__,"g",(function(){return HEAP_HOOK_PROPERTIES})),__webpack_require__.d(__webpack_exports__,"k",(function(){return TRIE_HOOK_PROPERTIES}));var BINARY_TREE_TYPE={BALANCED:"balanced",COMPLETE:"complete",PERFECT:"perfect",FULL:"full"},TREE_ID="react-tree-vis",CSS_VARIABLE_MAP={lineColor:{variableName:"--line-color",defaultValue:"#ccc",description:"Color of the line connecting nodes"},lineHoverColor:{variableName:"--line-hover-color",defaultValue:"#5f6674",description:"Hover color of the line connecting nodes"},lineRadius:{variableName:"--line-radius",defaultValue:"5px",description:"Radius of curves in the line"},nodeBorder:{variableName:"--node-border",defaultValue:"none",description:"Border style of the nodes. Syntax of short-hand CSS border property is accepted here."},nodeBorderRadius:{variableName:"--node-border-radius",defaultValue:"200px",description:""},nodeBackgroundColor:{variableName:"--node-bg-color",defaultValue:"#fff",description:""},nodeFontColor:{variableName:"--node-font-color",defaultValue:"#666",description:""},nodeShadow:{variableName:"--node-shadow",defaultValue:"-5px -5px 20px #fff, 5px 5px 20px #babecc",description:"Syntax of short-hand CSS shadow property accepted here."},nodeTextShadow:{variableName:"--node-text-shadow",defaultValue:"none",description:"Syntax of short-hand CSS shadow property accepted here."},nodeFontSize:{variableName:"--node-font-size",defaultValue:"20px",description:""},nodeFontFamily:{variableName:"--node-font-family",defaultValue:"arial, verdana, tahoma",description:""},nodeAvlHeightFontSize:{variableName:"--node-avl-height-font-size",defaultValue:"13px",description:""},nodeRedBackgroundColor:{variableName:"--node-red-bg-color",defaultValue:"#da606066",description:""},nodeBlackBackgroundColor:{variableName:"--node-black-bg-color",defaultValue:"#acacac66",description:""},nodeHighlightBorder:{variableName:"--node-hl-border",defaultValue:"none",description:"Syntax of short-hand CSS border property is accepted here."},nodeHighlightBackgroundColor:{variableName:"--node-hl-bg-color",defaultValue:"#fff",description:""},nodeHighlightFontColor:{variableName:"--node-hl-font-color",defaultValue:"#fff",description:""},nodeHighlightShadow:{variableName:"--node-hl-shadow",defaultValue:"-5px -5px 20px #fff, 5px 5px 20px #babecc",description:"Syntax of short-hand CSS shadow property accepted here."},nodeHighlightTextShadow:{variableName:"--node-hl-text-shadow",defaultValue:"0 0 5px #fff, 0 0 10px #fff, 0 0 15px #00ff15, 0 0 20px #00ff15, 0 0 25px #00ff15, 0 0 30px #00ff15, 0 0 35px #00ff15",description:"Syntax of short-hand CSS shadow property accepted here."},nodeHoverBorder:{variableName:"--node-hover-border",defaultValue:"none",description:"Syntax of short-hand CSS border property is accepted here."},nodeHoverBackgroundColor:{variableName:"--node-hover-bg-color",defaultValue:"#fff",description:""},nodeHoverFontColor:{variableName:"--node-hover-font-color",defaultValue:"#002574",description:""},nodeHoverShadow:{variableName:"--node-hover-shadow",defaultValue:"-1px -1px 5px #fff, 1px 1px 5px #babecc",description:"Syntax of short-hand CSS shadow property accepted here."},nodeHoverTextShadow:{variableName:"--node-hover-text-shadow",defaultValue:"none",description:"Syntax of short-hand CSS shadow property accepted here."},nodeNullFontColor:{variableName:"--node-null-font-color",defaultValue:"#7c7c7c2f",description:""},nodeNullHoverFontColor:{variableName:"--node-null-hover-font-color",defaultValue:"#ff0000b9",description:""},transitionDuration:{variableName:"--transition",defaultValue:"0.5s",description:""}},AVL_TREE_PROPS={head:["Prop","Type","Required","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","❌","Allows interaction with AVLTree component. <code>ref</code> object passed, is obtained from <code>useAVLTree()</code>."],["<code>data</code>","<code>number[]</code>","❌","Elements in the array are inserted into the tree on mount."],["<code>treeStyles</code>","<code>object</code>","❌","Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info."]]},RED_BLACK_TREE_PROPS={head:["Prop","Type","Required","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","❌","Allows interaction with RedBlackTree component. <code>ref</code> object passed, is obtained from <code>useRedBlackTree()</code>."],["<code>data</code>","<code>number[]</code>","❌","Elements in the array are inserted into the tree on mount."],["<code>treeStyles</code>","<code>object</code>","❌","Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info."]]},BINARY_SEARCH_TREE_PROPS={head:["Prop","Type","Required","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","❌","Allows interaction with BST component. <code>ref</code> object passed, is obtained from <code>useBinarySearchTree()</code>."],["<code>data</code>","<code>number[]</code>","❌","Elements in the array are inserted into the tree on mount."],["<code>treeStyles</code>","<code>object</code>","❌","Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info."]]},HEAP_PROPS={head:["Prop","Type","Required","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","❌","Allows interaction with Heap component. <code>ref</code> object passed, is obtained from <code>useHeap()</code>."],["<code>data</code>","<code>number[]</code>","❌","Elements in the array are inserted into the tree on mount."],["<code>treeStyles</code>","<code>object</code>","❌","Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info."]]},TRIE_PROPS={head:["Prop","Type","Required","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","❌","Allows interaction with Trie component. <code>ref</code> object passed, is obtained from <code>useTrie()</code>."],["<code>data</code>","<code>string[]</code>","❌","Elements in the array are inserted into the trie on mount."],["<code>treeStyles</code>","<code>object</code>","❌","Allows overriding default style of the component. Checkout treeStyles object story under STYLES for more info."]]},AVL_HOOK_PROPERTIES={head:["Property","Type","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","Pass this ref object to your tree component. It binds the functions returned by this hook to that component."],["<code>insert</code>","<code>(value: number) => void</code>","Inserts the value"],["<code>remove</code>","<code>(value: number) => boolean</code>","removes the value"],["<code>search</code>","<code>(value: number) => boolean</code>","Searches the value and returns true if found. Also, node found is highlighted"],["<code>getData</code>","<code>(traversalOrder: TraversalOrderType) => number[]</code>","Returns traversal of the tree"],["<code>clear</code>","<code>() => void</code>","Removes all nodes "],["<code>generateRandomTree</code>","<code>(countOfNodes: number) => void</code>","Removes all nodes and inserts countOfNodes random values."],["<code>checkTreeType</code>","<code>() => BinaryTreeCheckType[]</code>","Checks whether the current tree is balanced, complete, perfect or full"]]},BINARY_SEARCH_TREE_HOOK_PROPERTIES={head:["Property","Type","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","Pass this ref object to your tree component. It binds the functions returned by this hook to that component."],["<code>insert</code>","<code>(value: number) => void</code>","Inserts the value"],["<code>remove</code>","<code>(value: number) => boolean</code>","removes the value"],["<code>search</code>","<code>(value: number) => boolean</code>","Searches the value and returns true if found. Also, node found is highlighted"],["<code>getData</code>","<code>(traversalOrder: TraversalOrderType) => number[]</code>","Returns traversal of the tree"],["<code>clear</code>","<code>() => void</code>","Removes all nodes"],["<code>balance</code>","<code>() => void</code>","\tBalances the tree"],["<code>generateRandomTree</code>","<code>(countOfNodes: number) => void</code>","Removes all nodes and inserts countOfNodes random values."],["<code>checkTreeType</code>","<code>() => BinaryTreeCheckType[]</code>","Checks whether the current tree is balanced, complete, perfect or full"]]},HEAP_HOOK_PROPERTIES={head:["Property","Type","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","Pass this ref object to your tree component. It binds the functions returned by this hook to that component."],["<code>insert</code>","<code>(value: number) => void</code>","Inserts the value"],["<code>remove</code>","<code>(value: number) => boolean</code>","removes the value"],["<code>getData</code>","<code>() => number[]</code>","Returns internal array used to create heap"],["<code>clear</code>","<code>() => void</code>","Removes all nodes "],["<code>generateRandomTree</code>","<code>(countOfNodes: number) => void</code>","Removes all nodes and inserts countOfNodes random values."],["<code>extractTop</code>","<code>() => number</code>","Extracts the top most value from the heap and returns it"]]},TRIE_HOOK_PROPERTIES={head:["Property","Type","Description"],body:[["<code>ref</code>","<code>React.MutableRefObject&lt;any&gt;</code>","Pass this ref object to your Trie component. It binds the functions returned by this hook to that component."],["<code>insert</code>","<code>(word: string) => void</code>","Inserts the word"],["<code>remove</code>","<code>(word: string) => boolean</code>","removes the word"],["<code>search</code>","<code>(word: string) => boolean</code>","Searches the word and returns true if found. Also, the nodes are highlighted."],["<code>searchPrefix</code>","<code>(word: string) => boolean</code>","Searches the prefix and return true if full prefix is present. Also, the nodes are highlighted."],["<code>getAllWords</code>","<code>() => string[]</code>","Returns an array of all the words in trie"],["<code>generateRandomTrie</code>","<code>(countOfWords: number) => void</code>","Removes all nodes and inserts countOfNodes random words."],["<code>removeHighlight</code>","<code>() => void</code>","Removes highlight from all the nodes, if any"]]}},34:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return components_BinarySearchTree})),__webpack_require__.d(__webpack_exports__,"f",(function(){return components_Trie})),__webpack_require__.d(__webpack_exports__,"a",(function(){return components_AVLTree})),__webpack_require__.d(__webpack_exports__,"e",(function(){return components_RedBlackTree})),__webpack_require__.d(__webpack_exports__,"d",(function(){return components_MinHeap})),__webpack_require__.d(__webpack_exports__,"c",(function(){return components_MaxHeap})),__webpack_require__.d(__webpack_exports__,"h",(function(){return hooks_useBinarySearchTree})),__webpack_require__.d(__webpack_exports__,"k",(function(){return hooks_useTrie})),__webpack_require__.d(__webpack_exports__,"g",(function(){return hooks_useSelfBalancingTree})),__webpack_require__.d(__webpack_exports__,"j",(function(){return hooks_useSelfBalancingTree})),__webpack_require__.d(__webpack_exports__,"i",(function(){return hooks_useHeap}));__webpack_require__(60),__webpack_require__(28),__webpack_require__(126),__webpack_require__(40);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),constants=__webpack_require__(24),jsx_runtime=(__webpack_require__(87),__webpack_require__(9),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(124),__webpack_require__(1));function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}var NULL_NODE_JSX=Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{children:"null"})}),BSTree_getNormalNodeJSX=function getNormalNodeJSX(value,leftJSX,rightJSX){var isHighlighted=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal "+(isHighlighted?"highlight":""),children:value}),Object(jsx_runtime.jsxs)("ul",{children:[leftJSX," ",rightJSX]})]},value)};BSTree_getNormalNodeJSX.displayName="getNormalNodeJSX";var BSTree_Node=function(){function Node(value){_classCallCheck(this,Node),this.value=void 0,this.left=void 0,this.right=void 0,this.parent=void 0,this.leftJSX=void 0,this.rightJSX=void 0,this.currentJSX=void 0,this.value=value,this.left=null,this.right=null,this.parent=null,this.leftJSX=NULL_NODE_JSX,this.rightJSX=NULL_NODE_JSX,this.currentJSX=BSTree_getNormalNodeJSX(this.value,this.leftJSX,this.rightJSX)}return _createClass(Node,[{key:"insert",value:function insert(node,isLeft){var newJSX=node.currentJSX;isLeft?this.leftJSX=newJSX:this.rightJSX=newJSX,this.setJSX(),this.updateRootJSX()}},{key:"setJSX",value:function setJSX(){this.currentJSX=BSTree_getNormalNodeJSX(this.value,this.leftJSX,this.rightJSX)}},{key:"updateRootJSX",value:function updateRootJSX(){null!==this.parent&&(this.parent.left===this?this.parent.insert(this,!0):this.parent.insert(this,!1))}},{key:"setChildToNull",value:function setChildToNull(isLeft){isLeft?this.leftJSX=NULL_NODE_JSX:this.rightJSX=NULL_NODE_JSX,this.setJSX(),this.updateRootJSX()}},{key:"setChildToChildsChild",value:function setChildToChildsChild(isLeftChild,isLeft){isLeftChild?isLeft?(this.leftJSX=this.left.left.currentJSX,this.setJSX()):(this.leftJSX=this.left.right.currentJSX,this.setJSX()):isLeft?(this.rightJSX=this.right.left.currentJSX,this.setJSX()):(this.rightJSX=this.right.right.currentJSX,this.setJSX()),this.updateRootJSX()}},{key:"remove",value:function remove(childrenCondtion){this.parent&&(childrenCondtion?"left"===childrenCondtion?this.parent.left===this?this.parent.setChildToChildsChild(!0,!0):this.parent.setChildToChildsChild(!1,!0):this.parent.left===this?this.parent.setChildToChildsChild(!0,!1):this.parent.setChildToChildsChild(!1,!1):this.parent.left===this?this.parent.setChildToNull(!0):this.parent.setChildToNull(!1))}},{key:"updateValue",value:function updateValue(value){this.value=value,this.setJSX(),this.updateRootJSX()}},{key:"addHighlight",value:function addHighlight(){this.currentJSX=BSTree_getNormalNodeJSX(this.value,this.leftJSX,this.rightJSX,!0),this.updateRootJSX()}},{key:"clearHighlight",value:function clearHighlight(){this.setJSX(),this.updateRootJSX()}},{key:"balanceJSX",value:function balanceJSX(){!this.left&&this.right?(this.rightJSX=this.right.currentJSX,this.setChildToNull(!0)):!this.right&&this.left?(this.leftJSX=this.left.currentJSX,this.setChildToNull(!1)):this.right&&this.left?(this.leftJSX=this.left.currentJSX,this.rightJSX=this.right.currentJSX,this.setJSX(),this.updateRootJSX()):(this.leftJSX=NULL_NODE_JSX,this.rightJSX=NULL_NODE_JSX,this.setJSX(),this.updateRootJSX())}}]),Node}(),BSTree_BST=function(){function BST(){var num=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;_classCallCheck(this,BST),this.root=void 0,this.highlightedNode=void 0,this.leafDepth=void 0,this.root=null,num&&this.generateRandomBST(num),this.highlightedNode=null,this.leafDepth=-1}return _createClass(BST,[{key:"insert",value:function insert(value){this.clearHighlight();var newNode=new BSTree_Node(value);null===this.root?this.root=newNode:this.insertNode(this.root,newNode)}},{key:"insertNode",value:function insertNode(node,newNode){newNode.value<node.value?null===node.left?(node.left=newNode,newNode.parent=node,node.insert(newNode,!0)):this.insertNode(node.left,newNode):null===node.right?(node.right=newNode,newNode.parent=node,node.insert(newNode,!1)):this.insertNode(node.right,newNode)}},{key:"findMax",value:function findMax(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null==node||null==node.right?node:this.findMax(node.right)}},{key:"findMin",value:function findMin(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null==node||null==node.left?node:this.findMin(node.left)}},{key:"remove",value:function remove(value){this.clearHighlight(),this.root=this.removeNode(this.root,value)}},{key:"removeNode",value:function removeNode(node,value){if(null===node)return null;if(value<node.value)return node.left=this.removeNode(node.left,value),node;if(value>node.value)return node.right=this.removeNode(node.right,value),node;if(null===node.left&&null===node.right)return node.remove(null),node=null;if(null===node.left)return node.remove("right"),node.right.parent=node.parent,node=node.right;if(null===node.right)return node.remove("left"),node.left.parent=node.parent,node=node.left;var minNodeOfRight=this.findMin(node.right);return node.updateValue(minNodeOfRight.value),node.right=this.removeNode(node.right,minNodeOfRight.value),node}},{key:"height",value:function height(){var ans,node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null===node?-1:(ans=this.height(node.left),(ans=Math.max(this.height(node.right),ans))+1)}},{key:"countNodes",value:function countNodes(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null===node?0:this.countNodes(node.left)+1+this.countNodes(node.right)}},{key:"preorder",value:function preorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(list.push(node.value),this.preorder(list,node.left),this.preorder(list,node.right))}},{key:"inorder",value:function inorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(this.inorder(list,node.left),list.push(node.value),this.inorder(list,node.right))}},{key:"postorder",value:function postorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(this.postorder(list,node.left),this.postorder(list,node.right),list.push(node.value))}},{key:"search",value:function search(value){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;return this.clearHighlight(),null!==node&&(node.value===value?(node.addHighlight(),this.highlightedNode=node,!0):node.value>value?this.search(value,node.left):this.search(value,node.right))}},{key:"generateRandomBST",value:function generateRandomBST(num){for(var lower=2*num+10,elements=new Set,i=0;i<num;i++){for(var value=Math.floor(Math.random()*(0-lower+1))+lower;elements.has(value);)value=Math.floor(Math.random()*(0-lower+1))+lower;elements.add(value),this.insert(value)}}},{key:"checkBST",value:function checkBST(){var BALANCED=constants.e.BALANCED,COMPLETE=constants.e.COMPLETE,FULL=constants.e.FULL,PERFECT=constants.e.PERFECT,BSTTypeList=[];return this.isBalanced()&&BSTTypeList.push(BALANCED),this.isComplete()&&BSTTypeList.push(COMPLETE),this.isPerfect()&&BSTTypeList.push(FULL),this.isFull()&&BSTTypeList.push(PERFECT),BSTTypeList}},{key:"isBalanced",value:function isBalanced(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;if(null===node)return!0;var leftHeight=this.height(node.left),rightHeight=this.height(node.right);return Math.abs(leftHeight-rightHeight)<=1&&(this.isBalanced(node.left)&&this.isBalanced(node.right))}},{key:"isComplete",value:function isComplete(){var totalNodes=this.countNodes();return this.isComplete2(0,totalNodes)}},{key:"isComplete2",value:function isComplete2(index,totalNodes){var node=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.root;if(null===node)return!0;if(index>=totalNodes)return!1;var ans=this.isComplete2(2*index+1,totalNodes,node.left);return ans&&(ans=this.isComplete2(2*index+2,totalNodes,node.right)),ans}},{key:"isPerfect",value:function isPerfect(){return!(!this.isFull()||!this.isComplete())&&this.isPerfect2()}},{key:"isPerfect2",value:function isPerfect2(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,depth=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!node)return!0;if(depth++,!node.right&&!node.left){if(-1!==this.leafDepth&&this.leafDepth!==depth)return!1;this.leafDepth=depth}return this.isPerfect2(node.left,depth)&&this.isPerfect2(node.right,depth)}},{key:"isFull",value:function isFull(){var ans,node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null===node||(null===node.left&&null===node.right||null!==node.left&&null!==node.right&&((ans=this.isFull(node.left))&&(ans=this.isFull(node.right)),ans))}},{key:"balance",value:function balance(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;this.clearHighlight();var nodes=[];this.BSTToArr(node,nodes);var length=nodes.length;this.root=null,this.makeBST(nodes,0,length-1)}},{key:"BSTToArr",value:function BSTToArr(node,nodes){null!==node&&(this.BSTToArr(node.left,nodes),nodes.push(node),this.BSTToArr(node.right,nodes))}},{key:"makeBST",value:function makeBST(nodes,start,end){if(!(start>end)){var mid=Math.floor((start+end)/2);this.insert(nodes[mid].value),this.makeBST(nodes,start,mid-1),this.makeBST(nodes,mid+1,end)}}},{key:"clearHighlight",value:function clearHighlight(){this.highlightedNode&&(this.highlightedNode.clearHighlight(),this.highlightedNode=null)}}]),BST}(),BSTree=BSTree_BST;__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(16),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useTreeState=function useTreeState(treeObject){var _useState2=_slicedToArray(Object(react.useState)(treeObject),2),tree=_useState2[0],setTreeInternal=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(null==treeObject?void 0:treeObject.root.currentJSX),2),treeJSX=_useState4[0],setTreeJSX=_useState4[1];return{tree:tree,treeJSX:treeJSX,setTree:function setTree(newTreeObject){var _root;setTreeInternal(newTreeObject),setTreeJSX((null==newTreeObject||null===(_root=newTreeObject.root)||void 0===_root?void 0:_root.currentJSX)||(null==newTreeObject?void 0:newTreeObject.currentJSX))}}};__webpack_require__(67);function useTreeStyle_slicedToArray(arr,i){return function useTreeStyle_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function useTreeStyle_iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function useTreeStyle_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return useTreeStyle_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return useTreeStyle_arrayLikeToArray(o,minLen)}(arr,i)||function useTreeStyle_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function useTreeStyle_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useTreeStyle=function useTreeStyle(treeStyles){Object(react.useEffect)((function(){!function handleStyles(){if(treeStyles)for(var _i2=0,_Object$entries=Object.entries(treeStyles);_i2<_Object$entries.length;_i2++){var _ref2=useTreeStyle_slicedToArray(_Object$entries[_i2],2),style=_ref2[0],value=_ref2[1];document.getElementById(constants.j).style.setProperty(constants.f[style].variableName,value)}}()}),[treeStyles])},util=(__webpack_require__(443),__webpack_require__(38)),BinarySearchTree_BinarySearchTree=function BinarySearchTree(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles),Object(react.useImperativeHandle)(ref,(function(){return{insert:function insert(value){if(null==tree||!tree.root){var newTree=new BSTree;return newTree.insert(value),void setTree(newTree)}tree.insert(value),setTree(tree)},remove:function remove(value){return!(null==tree||!tree.root)&&(!!tree.search(value)&&(tree.remove(value),setTree(tree.root?tree:null),!0))},search:function search(value){if(null==tree||!tree.root)return!1;var foundNode=tree.search(value);return foundNode&&setTree(tree),foundNode},getData:function getData(traversalOrder){var traversalData=[];return tree[traversalOrder](traversalData),traversalData},clear:function clear(){setTree(new BSTree)},balance:function balance(){tree.balance(),setTree(tree)},generateRandomTree:function generateRandomTree(countOfNodes){var newTree=new BSTree(countOfNodes);setTree(newTree)},checkTreeType:function checkTreeType(){return tree.checkBST()}}}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new BSTree;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};BinarySearchTree_BinarySearchTree.displayName="BinarySearchTree";var BinarySearchTree_compareBinarySearchTree=function compareBinarySearchTree(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_BinarySearchTree=react_default.a.memo(Object(react.forwardRef)(BinarySearchTree_BinarySearchTree),BinarySearchTree_compareBinarySearchTree);try{BinarySearchTree_BinarySearchTree.displayName="BinarySearchTree",BinarySearchTree_BinarySearchTree.__docgenInfo={description:"",displayName:"BinarySearchTree",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"number[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/BinarySearchTree.tsx#BinarySearchTree"]={docgenInfo:BinarySearchTree_BinarySearchTree.__docgenInfo,name:"BinarySearchTree",path:"src/components/BinarySearchTree.tsx#BinarySearchTree"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(20),__webpack_require__(151);var AllWords={words:["step","tremble","dinner","gigantic","elated","torpid","crook","throat","equal","sum","marked","suggestion","dapper","afford","happy","mist","robin","spot","reaction","crayon","irritate","tightfisted","warlike","difficult","distinct","share","spiffy","suspend","base","squeak","abundant","unlock","spiritual","amuse","chance","crowded","friendly","shade","telephone","pig","parcel","part","follow","amount","earthy","collect","sort","drunk","blow","division","curve","seed","sniff","greet","workable","small","detect","week","day","truthful","milk","spotless","coat","escape","debt","optimal","jar","quixotic","lick","inconclusive","bruise","maid","laugh","scare","perform","chivalrous","nonstop","spiteful","ignore","toothbrush","promise","redundant","impulse","value","chalk","appear","sloppy","hook","breathe","wakeful","supreme","cat","arm","settle","orange","zoom","territory","damaging","deliver","children","protect","test","cracker","loutish","disapprove","clover","fry","blink","snails","neck","experience","boy","rely","expert","sulky","things","nation","jewel","crowd","tan","uncovered","abrupt","sad","rambunctious","pricey","slim","skinny","scissors","hour","cuddly","potato","lively","dirt","receipt","great","heap","cherries","lowly","wide","cowardly","insect","behave","zephyr","parallel","interfere","acoustics","head","stir","increase","steady","insurance","dashing","shrug","babies","efficient","chilly","puncture","excuse","advice","example","tin","dry","substance","jazzy","employ","lonely","reduce","majestic","spicy","gaudy","wealthy","rush","channel","harm","quirky","brief","stamp","thought","blot","shop","relax","destruction","zebra","fairies","wish","wobble","wail","light","growth","monkey","mine","yell","boil","egg","shrill","gate","deserve","lettuce","play","pick","shaggy","bee","cross","carry","form","malicious","side","dusty","trick","responsible","visit","maniacal","vast","mitten","visitor","feeling","gorgeous","sneaky","zipper","muddle","thumb","insidious","fresh","passenger","flat","giant","penitent","snail","free","dear","group","smiling","reflect","shut","overjoyed","key","clammy","stone","judge","repulsive","plantation","dreary","town","sincere","expansion","paddle","push","tray","lewd","mice","board","thank","nut","unpack","wash","sister","brainy","purple","preach","merciful","sidewalk","pathetic","start","limit","naive","fantastic","rebel","invent","macho","cellar","sable","list","rob","spiky","savory","cart","nasty","evanescent","shame","hurried","calculator","comb","selfish","internal","axiomatic","seat","return","different","stream","frogs","oval","same","oafish","tug","thoughtless","heady","limping","badge","learned","efficacious","haunt","annoying","battle","tooth","heavy","spectacular","ajar","silent","statuesque","earth","zinc","laborer","boast","faithful","annoy","honey","women","bells","spare","remind","agreement","wry","slave","pumped","nebulous","royal","rot","reign","arrogant","spotted","wire","judicious","graceful","defeated","black","piquant","extend","early","belligerent","dust","cooing","subdued","lip","messy","snake","save","sheet","bow","hulking","accept","inquisitive","mammoth","elderly","land","kiss","freezing","aunt","quack","wave","dogs","knotty","arrest","bell","one","print","underwear","painful","wicked","birthday","cream","proud","sour","greedy","surprise","pray","fetch","furniture","songs","kitty","metal","painstaking","hat","adamant","rifle","charming","scale","heartbreaking","friend","blade","plane","cloth","holistic","yellow","sassy","terrible","bad","toes","parched","secretary","rescue","shiny","need","sticky","explode","squeeze","dime","ancient","idiotic","box","pot","field","handy","cent","drop","rings","taste","bead","ear","camera","month","move","awful","identify","yielding","omniscient","governor","handsome","vegetable","team","odd","sand","show","sweet","numberless","infamous","frightened","watery","wool","cobweb","coal","observe","connection","song","faulty","deafening","jog","match","complain","cut","servant","skirt","sticks","weigh","acid","excellent","damp","glib","devilish","attractive","trashy","nippy","tight","squirrel","power","bite","hang","cynical","rhyme","humdrum","sick","men","late","tempt","duck","eatable","dam","sharp","wistful","third","nimble","agonizing","living","closed","low","hissing","uppity","check","puffy","adjoining","ambiguous","sleepy","tour","rigid","erratic","abhorrent","colossal","vengeful","sky","grotesque","exultant","adaptable","turn","versed","donkey","ask","crazy","useful","pass","medical","prickly","guarded","explain","cooperative","drag","squalid","sock","ruthless","lumber","wrestle","worm","worry","capable","lamp","powder","squeal","control","class","depressed","point","death","gentle","beginner","reply","pour","likeable","actually","preserve","adhesive","clear","cool","squealing","veil","unsuitable","imperfect","count","curvy","brass","even","shoe","alcoholic","beautiful","youthful","treatment","bridge","animal","son","decision","humor","moon","delightful","design","improve","luxuriant","stay","tongue","stingy","collar","highfalutin","disgusting","white","mere","foregoing","hammer","vulgar","gifted","interest","tree","industry","exchange","icicle","snatch","better","cloistered","defiant","skate","park","encouraging","road","abrasive","possible","art","label","whimsical","abnormal","rule","bang","clap","welcome","charge","glass","slimy","eggnog","determined","neat","close","toys","scared","approval","trip","crooked","scrape","dramatic","books","canvas","pipe","window","breezy","hard","two","rice","miss","interrupt","plausible","mom","mountain","morning","watch","hair","strengthen","whisper","reading","trite","burst","manage","touch","ceaseless","weather","thing","swift","detailed","afraid","suspect","silver","enjoy","pancake","flippant","income","madly","tense","vague","quicksand","agree","haircut","aberrant","abject","horses","standing","peel","tiger","average","cultured","lake","shave","mellow","past","giants","rose","enthusiastic","exist","tow","cats","fool","tricky","slippery","travel","tire","bitter","knot","obtain","quiver","dirty","kittens","repeat","descriptive","stem","nest","trousers","mate","smoke","request","automatic","huge","street","bump","church","repair","strange","soggy","argue","elfin","spurious","occur","back","motion","chicken","arch","tickle","shy","nervous","wrap","glove","carve","punishment","zoo","dynamic","door","ablaze","weak","eager","fancy","imminent","current","onerous","joyous","beneficial","voyage","smart","quarter","dance","buzz","oil","letter","dull","kaput","oven","grumpy","can","mix","brush","wealth","record","clip","earn","book","planes","bikes","spark","lucky","frighten","languid","wilderness","drawer","happen","geese","five","fortunate","entertain","tall","slope","invincible","spell","phone","smooth","jobless","woozy","berserk","flock","sea","moor","alarm","stare","aloof","rural","finicky","sprout","distribution","embarrass","groan","melt","salty","bizarre","small","ticket","young","offbeat","material","recondite","woebegone","combative","disarm","trade","yam","wink","pack","pleasant","doll","disastrous","rabbits","shivering","loving","irate","industrious","plastic","cabbage","top","room","cough","bare","release","grab","stain","jail","basketball","magical","incandescent","rustic","vacuous","unfasten","chase","crack","toad","dream","glamorous","impossible","lace","present","detail","gruesome","ill","credit","tramp","stormy","chop","recess","dolls","somber","finger","afterthought","quizzical","confess","nappy","range","bake","glue","remember","flavor","defective","divergent","use","history","psychotic","precious","car","annoyed","fair","wholesale","sparkle","pan","abstracted","grateful","flight","notebook","cause","secret","attempt","obese","trot","card","drum","regret","organic","skip","helpful","time","toe","grandiose","ugly","ants","fuzzy","tasteful","money","blushing","reason","harmony","relieved","shaky","romantic","illegal","perpetual","ski","nail","halting","care","grouchy","religion","ladybug","desert","war","lie","wrist","circle","straight","pop","bed","scratch","nifty","popcorn","baseball","cheer","bath","representative","fertile","train","heavenly","cumbersome","disgusted","tasteless","attraction","whip","country","run","alleged","willing","pin","reflective","supply","reproduce","lazy","frantic","needless","best","addition","communicate","tangible","thin","honorable","argument","carpenter","office","nosy","silky","public","first","jumbled","soda","signal","cure","bike","tawdry","pastoral","hover","decide","crate","dangerous","handle","general","cave","disturbed","shelter","flashy","wrong","meal","nonchalant","functional","sin","question","authority","ordinary","last","military","simple","pat","found","include","toothsome","previous","calendar","smelly","advise","wheel","reject","memorise","vacation","angry","cattle","brake","cows","fence","whole","festive","protest","meek","fragile","enchanted","unit"]};function Trie_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function Trie_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function Trie_createClass(Constructor,protoProps,staticProps){return protoProps&&Trie_defineProperties(Constructor.prototype,protoProps),staticProps&&Trie_defineProperties(Constructor,staticProps),Constructor}var Trie_nodeTrie=function(){function nodeTrie(key){Trie_classCallCheck(this,nodeTrie),this.isEnd=void 0,this.children=void 0,this.parent=void 0,this.key=void 0,this.childrenJSX=void 0,this.currentJSX=void 0,this.isEnd=!1,this.children={},this.parent=null,this.key=key,this.childrenJSX=[],this.currentJSX=Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal",children:key||"Root"}),this.childrenJSX.length?Object(jsx_runtime.jsx)("ul",{children:this.childrenJSX}):null]},this.key)}return Trie_createClass(nodeTrie,[{key:"updateJSX",value:function updateJSX(){var isAddHighlight=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.childrenJSX=[];for(var keys=Object.keys(this.children),i=0;i<keys.length;i++)this.childrenJSX.push(this.children[keys[i]].currentJSX);this.currentJSX=Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal "+(this.isEnd?"end":"")+" "+(isAddHighlight?"highlight":""),children:this.key?this.key:"Root"}),this.childrenJSX.length?Object(jsx_runtime.jsx)("ul",{children:this.childrenJSX}):null]},this.key),this.parent&&this.parent.updateJSX(isAddHighlight)}}]),nodeTrie}(),Trie_Trie=function(){function Trie(){var num=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;Trie_classCallCheck(this,Trie),this.root=void 0,this.highlightedTill=void 0,this.root=new Trie_nodeTrie(null),this.highlightedTill=null,num&&this.randomTrie(num)}return Trie_createClass(Trie,[{key:"insert",value:function insert(word){if(""!==word){word=(word=word.trim()).toUpperCase();for(var node=this.root,i=0;i<word.length;i++)node.children[word[i]]||(node.children[word[i]]=new Trie_nodeTrie(word[i]),node.children[word[i]].parent=node),node=node.children[word[i]],i===word.length-1&&(node.isEnd=!0);node.updateJSX()}}},{key:"searchWord",value:function searchWord(word){if(""===word)return!1;word=(word=word.trim()).toUpperCase();for(var node=this.root,i=0;i<word.length;i++){if(!node.children[word[i]])return!1;if(node=node.children[word[i]],i===word.length-1)return node.isEnd}return!1}},{key:"deleteWord",value:function deleteWord(word){if(!this.searchWord(word))return!1;word=(word=word.trim()).toUpperCase();for(var node=this.root,i=0;i<word.length;i++)node=node.children[word[i]];if(node.isEnd=!1,0===Object.keys(node.children).length){node=node.parent;for(var _i=word.length-1;_i>=0;_i--){if(node===this.root){delete node.children[word[_i]];break}if(node.isEnd){delete node.children[word[_i]];break}if(Object.keys(node.children).length>1){delete node.children[word[_i]];break}node=node.parent}}return node.updateJSX(),!0}},{key:"findPrefix",value:function findPrefix(word){if(this.removeHighligt(),""===word)return!1;word=(word=word.trim()).toUpperCase();for(var node=this.root,i=0;i<word.length;i++){if(!node.children[word[i]])return!1;node=node.children[word[i]]}return node.updateJSX(true),this.highlightedTill=node,!0}},{key:"findAllWords",value:function findAllWords(){for(var node=this.root,allWords=[],i=0;i<Object.keys(node.children).length;i++)this.findAllWordsHelper(node.children[Object.keys(node.children)[i]],allWords);return allWords}},{key:"findAllWordsHelper",value:function findAllWordsHelper(node,allWords){var word=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";word+=node.key,node.isEnd&&allWords.push(word);for(var i=0;i<Object.keys(node.children).length;i++)this.findAllWordsHelper(node.children[Object.keys(node.children)[i]],allWords,word)}},{key:"randomTrie",value:function randomTrie(num){num>993&&(num=993);for(var allWords=AllWords.words,lower=2*num+10,indexOfWordsAdded=new Set,i=0;i<num;i++){for(var value=Math.floor(Math.random()*(0-lower+1))+lower;indexOfWordsAdded.has(value)||value>993;)value=Math.floor(Math.random()*(0-lower+1))+lower;indexOfWordsAdded.add(value),this.insert(allWords[value])}}},{key:"removeHighligt",value:function removeHighligt(){this.highlightedTill&&(this.highlightedTill.updateJSX(),this.highlightedTill=null)}}]),Trie}(),data_structures_Trie=Trie_Trie,components_Trie_Trie=function Trie(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles);var trieFunctions={insert:function insert(word){if(null==tree||!tree.root){var newTree=new data_structures_Trie;return newTree.insert(word),void setTree(newTree)}tree.insert(word),setTree(tree)},remove:function remove(word){return!(null==tree||!tree.root||!word)&&(!!tree.deleteWord(word)&&(setTree(tree.root?tree:null),!0))},search:function search(word){return!(null==tree||!tree.root||!word)&&(!!tree.searchWord(word)&&(tree.findPrefix(word),setTree(tree),!0))},searchPrefix:function searchPrefix(word){if(null==tree||!tree.root)return!1;var isPrefixFound=tree.findPrefix(word);return setTree(tree),isPrefixFound},getAllWords:function getAllWords(){return null!=tree&&tree.root?tree.findAllWords():[]},generateRandomTrie:function generateRandomTrie(wordCount){var newTrie=new data_structures_Trie(wordCount);setTree(newTrie)},removeHighlight:function removeHighlight(){tree.removeHighligt(),setTree(tree)}};Object(react.useImperativeHandle)(ref,(function(){return trieFunctions}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new data_structures_Trie;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};components_Trie_Trie.displayName="Trie";var Trie_compareTrie=function compareTrie(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_Trie=react_default.a.memo(Object(react.forwardRef)(components_Trie_Trie),Trie_compareTrie);try{components_Trie_Trie.displayName="Trie",components_Trie_Trie.__docgenInfo={description:"",displayName:"Trie",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"string[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Trie.tsx#Trie"]={docgenInfo:components_Trie_Trie.__docgenInfo,name:"Trie",path:"src/components/Trie.tsx#Trie"})}catch(__react_docgen_typescript_loader_error){}function AVLTree_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function AVLTree_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function AVLTree_createClass(Constructor,protoProps,staticProps){return protoProps&&AVLTree_defineProperties(Constructor.prototype,protoProps),staticProps&&AVLTree_defineProperties(Constructor,staticProps),Constructor}var AVLTree_BALANCED=constants.e.BALANCED,AVLTree_COMPLETE=constants.e.COMPLETE,AVLTree_FULL=constants.e.FULL,AVLTree_PERFECT=constants.e.PERFECT,AVLTree_NULL_NODE_JSX=Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{children:"null"})}),AVLTree_getNormalNodeJSX=function getNormalNodeJSX(value,height,leftJSX,rightJSX){var isHighlighted=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsxs)("div",{className:"normal "+(isHighlighted?"highlight":""),children:[value," ",Object(jsx_runtime.jsx)("p",{className:"height",children:height})]}),Object(jsx_runtime.jsxs)("ul",{children:[leftJSX," ",rightJSX]})]},value)};AVLTree_getNormalNodeJSX.displayName="getNormalNodeJSX";var AVLTree_Node=function(){function Node(value){AVLTree_classCallCheck(this,Node),this.value=void 0,this.height=void 0,this.left=void 0,this.right=void 0,this.parent=void 0,this.leftJSX=void 0,this.rightJSX=void 0,this.currentJSX=void 0,this.value=value,this.height=0,this.left=null,this.right=null,this.parent=null,this.leftJSX=AVLTree_NULL_NODE_JSX,this.rightJSX=AVLTree_NULL_NODE_JSX,this.currentJSX=AVLTree_getNormalNodeJSX(this.value,this.height,this.leftJSX,this.rightJSX)}return AVLTree_createClass(Node,[{key:"insert",value:function insert(node,isLeft){var newJSX=node.currentJSX;isLeft?this.leftJSX=newJSX:this.rightJSX=newJSX,this.setJSX(),this.updateRootJSX()}},{key:"setJSX",value:function setJSX(){this.currentJSX=AVLTree_getNormalNodeJSX(this.value,this.height,this.leftJSX,this.rightJSX)}},{key:"updateRootJSX",value:function updateRootJSX(){null!==this.parent&&(this.parent.left===this?this.parent.insert(this,!0):this.parent.insert(this,!1))}},{key:"setChildToNull",value:function setChildToNull(isLeft){isLeft?this.leftJSX=AVLTree_NULL_NODE_JSX:this.rightJSX=AVLTree_NULL_NODE_JSX,this.setJSX(),this.updateRootJSX()}},{key:"setChildToChildsChild",value:function setChildToChildsChild(isLeftChild,isLeft){isLeftChild?isLeft?(this.leftJSX=this.left.left.currentJSX,this.setJSX()):(this.leftJSX=this.left.right.currentJSX,this.setJSX()):isLeft?(this.rightJSX=this.right.left.currentJSX,this.setJSX()):(this.rightJSX=this.right.right.currentJSX,this.setJSX()),this.updateRootJSX()}},{key:"remove",value:function remove(childrenCondtion){this.parent&&(childrenCondtion?"left"===childrenCondtion?this.parent.left===this?this.parent.setChildToChildsChild(!0,!0):this.parent.setChildToChildsChild(!1,!0):this.parent.left===this?this.parent.setChildToChildsChild(!0,!1):this.parent.setChildToChildsChild(!1,!1):this.parent.left===this?this.parent.setChildToNull(!0):this.parent.setChildToNull(!1))}},{key:"updateValue",value:function updateValue(value){this.value=value,this.setJSX(),this.updateRootJSX()}},{key:"addHighlight",value:function addHighlight(){this.currentJSX=AVLTree_getNormalNodeJSX(this.value,this.height,this.leftJSX,this.rightJSX,!0),this.updateRootJSX()}},{key:"clearHighlight",value:function clearHighlight(){this.setJSX(),this.updateRootJSX()}},{key:"balanceJSX",value:function balanceJSX(){!this.left&&this.right?(this.right.balanceJSX(),this.rightJSX=this.right.currentJSX,this.setChildToNull(!0)):!this.right&&this.left?(this.left.balanceJSX(),this.leftJSX=this.left.currentJSX,this.setChildToNull(!1)):this.right&&this.left?(this.left.balanceJSX(),this.right.balanceJSX(),this.leftJSX=this.left.currentJSX,this.rightJSX=this.right.currentJSX,this.setJSX(),this.updateRootJSX()):(this.leftJSX=AVLTree_NULL_NODE_JSX,this.rightJSX=AVLTree_NULL_NODE_JSX,this.setJSX(),this.updateRootJSX())}}]),Node}(),AVL=function(){function AVL(){var num=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;AVLTree_classCallCheck(this,AVL),this.root=void 0,this.highlightedNode=void 0,this.leafDepth=void 0,this.root=null,num&&this.generateRandomBST(num),this.highlightedNode=null,this.leafDepth=-1}return AVLTree_createClass(AVL,[{key:"rotateRight",value:function rotateRight(node){var tempNode=node.left;return node.left.right&&(node.left.right.parent=node),node.left=node.left.right,tempNode.parent=node.parent,node.parent=tempNode,tempNode.right=node,tempNode.height=this.setHeight(tempNode),node.height=this.setHeight(node),tempNode}},{key:"rotateLeft",value:function rotateLeft(node){var tempNode=node.right;return node.right.left&&(node.right.left.parent=node),node.right=node.right.left,tempNode.parent=node.parent,node.parent=tempNode,tempNode.left=node,tempNode.height=this.setHeight(tempNode),node.height=this.setHeight(node),tempNode}},{key:"setHeight",value:function setHeight(node){if(null===node)return-1;var leftHeight=null!==node.left?node.left.height:-1,rightHeight=null!==node.right?node.right.height:-1;return Math.max(leftHeight,rightHeight)+1}},{key:"balanceCheck",value:function balanceCheck(node){return null===node?0:(null!==node.left?node.left.height:-1)-(null!==node.right?node.right.height:-1)}},{key:"balance",value:function balance(node){var balance=this.balanceCheck(node);return balance>1?(this.setHeight(node.left.left)>this.setHeight(node.left.right)||(node.left=this.rotateLeft(node.left)),node=this.rotateRight(node)):balance<-1&&(this.setHeight(node.right.right)>this.setHeight(node.right.left)||(node.right=this.rotateRight(node.right)),node=this.rotateLeft(node)),null!==node&&(node.height=this.setHeight(node)),node&&node.right&&node.right.balanceJSX(),node&&node.left&&node.left.balanceJSX(),node}},{key:"findMax",value:function findMax(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null==node||null==node.right?node:this.findMax(node.right)}},{key:"findMin",value:function findMin(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null==node||null==node.left?node:this.findMin(node.left)}},{key:"insert",value:function insert(value){this.clearHighlight();var newNode=new AVLTree_Node(value);null===this.root?this.root=newNode:this.root=this.insertNode(this.root,newNode)}},{key:"insertNode",value:function insertNode(node,newNode){return newNode.value<node.value?null===node.left?(node.left=newNode,newNode.parent=node,node.insert(newNode,!0)):node.left=this.insertNode(node.left,newNode):null===node.right?(node.right=newNode,newNode.parent=node,node.insert(newNode,!1)):node.right=this.insertNode(node.right,newNode),node=this.balance(node)}},{key:"remove",value:function remove(value){this.clearHighlight(),this.root=this.removeNode(this.root,value)}},{key:"removeNode",value:function removeNode(node,value){if(null==node)return null;if(value<node.value)node.left=this.removeNode(node.left,value);else if(value>node.value)node.right=this.removeNode(node.right,value);else if(null===node.left&&null===node.right)node.remove(null),node=null;else if(null===node.left)node.remove("right"),node.right.parent=node.parent,node=node.right;else if(null===node.right)node.remove("left"),node.left.parent=node.parent,node=node.left;else{var minNodeOfRight=this.findMin(node.right);node.updateValue(minNodeOfRight.value),node.right=this.removeNode(node.right,minNodeOfRight.value)}return node=this.balance(node)}},{key:"preorder",value:function preorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(list.push(node.value),this.preorder(list,node.left),this.preorder(list,node.right))}},{key:"inorder",value:function inorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(this.inorder(list,node.left),list.push(node.value),this.inorder(list,node.right))}},{key:"postorder",value:function postorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;null!==node&&(this.postorder(list,node.left),this.postorder(list,node.right),list.push(node.value))}},{key:"search",value:function search(value){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;return this.clearHighlight(),null!==node&&(node.value===value?(node.addHighlight(),this.highlightedNode=node,!0):node.value>value?this.search(value,node.left):this.search(value,node.right))}},{key:"generateRandomBST",value:function generateRandomBST(num){for(var lower=2*num+10,elements=new Set,i=0;i<num;i++){for(var value=Math.floor(Math.random()*(0-lower+1))+lower;elements.has(value);)value=Math.floor(Math.random()*(0-lower+1))+lower;elements.add(value),this.insert(value)}}},{key:"checkAVL",value:function checkAVL(){var BSTTypeList=[];return this.isBalanced()&&BSTTypeList.push(AVLTree_BALANCED),this.isComplete()&&BSTTypeList.push(AVLTree_COMPLETE),this.isPerfect()&&BSTTypeList.push(AVLTree_PERFECT),this.isFull()&&BSTTypeList.push(AVLTree_FULL),BSTTypeList}},{key:"isBalanced",value:function isBalanced(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;if(null===node)return!0;var leftH=node.left?node.left.height:-1,rightH=node.right?node.right.height:-1;return Math.abs(leftH-rightH)<=1&&(this.isBalanced(node.left)&&this.isBalanced(node.right))}},{key:"isComplete",value:function isComplete(){var totalNodes=this.countNodes();return this.isComplete2(0,totalNodes)}},{key:"isComplete2",value:function isComplete2(index,totalNodes){var node=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.root;if(null===node)return!0;if(index>=totalNodes)return!1;var ans=this.isComplete2(2*index+1,totalNodes,node.left);return ans&=this.isComplete2(2*index+2,totalNodes,node.right)}},{key:"isPerfect",value:function isPerfect(){return!(!this.isFull()||!this.isComplete())&&this.isPerfect2()}},{key:"isPerfect2",value:function isPerfect2(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,depth=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!node)return!0;if(depth++,!node.right&&!node.left){if(-1!==this.leafDepth&&this.leafDepth!==depth)return!1;this.leafDepth=depth}return this.isPerfect2(node.left,depth)&&this.isPerfect2(node.right,depth)}},{key:"isFull",value:function isFull(){var ans,node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null===node||(null===node.left&&null===node.right||null!==node.left&&null!==node.right&&((ans=this.isFull(node.left))&&(ans=this.isFull(node.right)),ans))}},{key:"countNodes",value:function countNodes(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return null===node?0:this.countNodes(node.left)+1+this.countNodes(node.right)}},{key:"clearHighlight",value:function clearHighlight(){this.highlightedNode&&(this.highlightedNode.clearHighlight(),this.highlightedNode=null)}}]),AVL}(),data_structures_AVLTree=AVL,AVLTree_AVLTree=function AVLTree(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles),Object(react.useImperativeHandle)(ref,(function(){return{insert:function insert(value){if(null==tree||!tree.root){var newTree=new data_structures_AVLTree;return newTree.insert(value),void setTree(newTree)}tree.insert(value),setTree(tree)},remove:function remove(value){return!(null==tree||!tree.root)&&(!!tree.search(value)&&(tree.remove(value),setTree(tree.root?tree:null),!0))},search:function search(value){if(null==tree||!tree.root)return!1;var foundNode=tree.search(value);return foundNode&&setTree(tree),foundNode},getData:function getData(traversalOrder){var traversalData=[];return tree[traversalOrder](traversalData),traversalData},clear:function clear(){setTree(new data_structures_AVLTree)},generateRandomTree:function generateRandomTree(countOfNodes){var newTree=new data_structures_AVLTree(countOfNodes);setTree(newTree)},checkTreeType:function checkTreeType(){return tree.checkAVL()}}}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new data_structures_AVLTree;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};AVLTree_AVLTree.displayName="AVLTree";var AVLTree_compareAVLTree=function compareAVLTree(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_AVLTree=react_default.a.memo(Object(react.forwardRef)(AVLTree_AVLTree),AVLTree_compareAVLTree);try{AVLTree_AVLTree.displayName="AVLTree",AVLTree_AVLTree.__docgenInfo={description:"",displayName:"AVLTree",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"number[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/AVLTree.tsx#AVLTree"]={docgenInfo:AVLTree_AVLTree.__docgenInfo,name:"AVLTree",path:"src/components/AVLTree.tsx#AVLTree"})}catch(__react_docgen_typescript_loader_error){}function RedBlackTree_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function RedBlackTree_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function RedBlackTree_createClass(Constructor,protoProps,staticProps){return protoProps&&RedBlackTree_defineProperties(Constructor.prototype,protoProps),staticProps&&RedBlackTree_defineProperties(Constructor,staticProps),Constructor}var RedBlackTree_BALANCED=constants.e.BALANCED,RedBlackTree_COMPLETE=constants.e.COMPLETE,RedBlackTree_FULL=constants.e.FULL,RedBlackTree_PERFECT=constants.e.PERFECT,RedBlackTree_getNormalNodeJSX=function getNormalNodeJSX(value,leftJSX,rightJSX,color){var isHighlighted=arguments.length>4&&void 0!==arguments[4]&&arguments[4];return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal "+(1===color?"red":"black")+" "+(isHighlighted?"highlight":""),children:value}),Object(jsx_runtime.jsxs)("ul",{children:[leftJSX," ",rightJSX]})]},value)};RedBlackTree_getNormalNodeJSX.displayName="getNormalNodeJSX";var RedBlackTree_NullNode=function(){function NullNode(){RedBlackTree_classCallCheck(this,NullNode),this.color=void 0,this.isNull=void 0,this.parent=void 0,this.currentJSX=void 0,this.value=void 0,this.left=void 0,this.right=void 0,this.color=0,this.isNull=!0,this.parent=null,this.currentJSX=Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{className:"null black",children:"null"})})}return RedBlackTree_createClass(NullNode,[{key:"insert",value:function insert(){}},{key:"addHighlight",value:function addHighlight(){}}]),NullNode}(),RedBlackTree_Node=function(){function Node(value){RedBlackTree_classCallCheck(this,Node),this.value=void 0,this.color=void 0,this.right=void 0,this.left=void 0,this.parent=void 0,this.isNull=void 0,this.currentJSX=void 0;var newNullNode=new RedBlackTree_NullNode;newNullNode.parent=this,this.value=value,this.color=1,this.right=newNullNode,this.left=newNullNode,this.parent=null,this.isNull=!1,this.currentJSX=Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal red",children:this.value}),Object(jsx_runtime.jsxs)("ul",{children:[this.left.currentJSX," ",this.right.currentJSX]})]},this.value)}return RedBlackTree_createClass(Node,[{key:"setHtml",value:function setHtml(){this.currentJSX=RedBlackTree_getNormalNodeJSX(this.value,this.left.currentJSX,this.right.currentJSX,this.color)}},{key:"updateRootHtml",value:function updateRootHtml(){null!==this.parent&&this.parent.insert()}},{key:"insert",value:function insert(){this.setHtml(),this.updateRootHtml()}},{key:"addHighlight",value:function addHighlight(){this.currentJSX=RedBlackTree_getNormalNodeJSX(this.value,this.left.currentJSX,this.right.currentJSX,this.color,!0),this.updateRootHtml()}},{key:"clearHighlight",value:function clearHighlight(){this.setHtml(),this.updateRootHtml()}}]),Node}(),RBT=function(){function RBT(){var num=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;RedBlackTree_classCallCheck(this,RBT),this.root=void 0,this.highlighted=void 0,this.leafDepth=void 0;var newNullNode=new RedBlackTree_NullNode;this.root=newNullNode,num&&this.generateRandomBST(num),this.highlighted=null,this.leafDepth=-1}return RedBlackTree_createClass(RBT,[{key:"rotateRight",value:function rotateRight(node,toRecolor){var parent=node.parent;node.parent=parent.parent,null!==parent.parent&&(parent.parent.left===parent?parent.parent.left=node:parent.parent.right=node);var right=node.right;node.right=parent,parent.parent=node,parent.left=right,right.parent=parent,toRecolor&&(node.color=0,parent.color=1)}},{key:"rotateLeft",value:function rotateLeft(node,toRecolor){var parent=node.parent;node.parent=parent.parent,null!==parent.parent&&(parent.parent.right===parent?parent.parent.right=node:parent.parent.left=node);var left=node.left;node.left=parent,parent.parent=node,parent.right=left,left.parent=parent,toRecolor&&(node.color=0,parent.color=1)}},{key:"siblingOf",value:function siblingOf(node){return null===node.parent?null:node.parent.left===node?node.parent.right:node.parent.left}},{key:"findMin",value:function findMin(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return node.isNull||node.left.isNull?node:this.findMin(node.left)}},{key:"insert",value:function insert(value){this.root=this.insertNode(null,this.root,value)}},{key:"insertNode",value:function insertNode(parent,node,value){if(node.isNull){var newNode=new RedBlackTree_Node(value);return null===parent?(newNode.color=0,newNode.insert(),newNode):(newNode.parent=parent,newNode)}if(node.value===value)return node;var isLeft;if(node.value>value){var left=this.insertNode(node,node.left,value);if(left===node.parent)return node.insert(),left;node.left=left,isLeft=!0}else{var right=this.insertNode(node,node.right,value);if(right===node.parent)return node.insert(),right;node.right=right,isLeft=!1}if(isLeft){if(1===node.left.color&&1===node.color){var sibling=this.siblingOf(node);0===sibling.color||sibling.isNull?node.parent.left===node?this.rotateRight(node,!0):(this.rotateRight(node.left,!1),node=node.parent,this.rotateLeft(node,!0)):(node.color=0,sibling.color=0,null!==node.parent.parent&&(node.parent.color=1))}}else if(1===node.right.color&&1===node.color){var _sibling=this.siblingOf(node);0===_sibling.color||_sibling.isNull?node.parent.right===node?this.rotateLeft(node,!0):(this.rotateLeft(node.right,!1),node=node.parent,this.rotateRight(node,!0)):(node.color=0,_sibling.color=0,null!==node.parent.parent&&(node.parent.color=1))}return node.left.isNull||node.left.insert(),node.right.isNull||node.right.insert(),node}},{key:"remove",value:function remove(value){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;if(this.clearHighlight(),!node.isNull){if(node.value===value)if(node.left.isNull||node.right.isNull){var tempParent=node.parent;this.deleteOneChild(node),tempParent?(tempParent.left.isNull||tempParent.left.insert(),tempParent.right.isNull||tempParent.right.insert(),tempParent.insert(),tempParent.parent&&tempParent.parent.insert()):this.root.isNull||this.root.insert()}else{var smallestRight=this.findMin(node.right);node.value=smallestRight.value,node.insert(),this.remove(smallestRight.value,node.right)}node.value>value?this.remove(value,node.left):this.remove(value,node.right)}}},{key:"deleteOneChild",value:function deleteOneChild(node){var child;child=node.left.isNull?node.right:node.left,this.replaceChild(child,node),0===node.color&&(1===child.color?(child.color=0,child.insert()):this.deleteCase1(child))}},{key:"deleteCase1",value:function deleteCase1(node){if(null===node.parent)return this.root=node,void(this.root.isNull||this.root.insert());this.deleteCase2(node)}},{key:"deleteCase2",value:function deleteCase2(node){var sibling=this.siblingOf(node);1===sibling.color&&(sibling.parent.left===sibling?this.rotateRight(sibling,!0):this.rotateLeft(sibling,!0),null===sibling.parent&&(this.root=sibling)),this.deleteCase3(node)}},{key:"deleteCase3",value:function deleteCase3(node){var sibling=this.siblingOf(node);0===node.parent.color&&0===sibling.color&&0===sibling.left.color&&0===sibling.right.color?(sibling.color=1,this.deleteCase1(node.parent)):this.deleteCase4(node)}},{key:"deleteCase4",value:function deleteCase4(node){var sibling=this.siblingOf(node);if(1===node.parent.color&&0===sibling.color&&0===sibling.left.color&&0===sibling.right.color)return sibling.color=1,void(node.parent.color=0);this.deleteCase5(node)}},{key:"deleteCase5",value:function deleteCase5(node){var sibling=this.siblingOf(node);0===sibling.color&&(node.parent.left===node&&0===sibling.right.color&&1===sibling.left.color?(this.rotateRight(sibling.left,!0),sibling.insert()):node.parent.right===node&&0===sibling.left.color&&1===sibling.right.color&&(this.rotateLeft(sibling.right,!0),sibling.insert())),this.deleteCase6(node)}},{key:"deleteCase6",value:function deleteCase6(node){var sibling=this.siblingOf(node);sibling.color=sibling.parent.color,sibling.parent.color=0,node.parent.left===node?(sibling.right.color=0,this.rotateLeft(sibling,!1),sibling.right.isNull||sibling.right.insert(),sibling.left.isNull||sibling.left.insert()):(sibling.left.color=0,this.rotateRight(sibling,!1),sibling.right.isNull||sibling.right.insert(),sibling.left.isNull||sibling.left.insert()),null===sibling.parent&&(this.root=sibling)}},{key:"replaceChild",value:function replaceChild(child,node){child.parent=node.parent,null===node.parent?this.root=child:node.parent.left===node?node.parent.left=child:node.parent.right=child}},{key:"preorder",value:function preorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;node.isNull||(list.push(node.value),this.preorder(list,node.left),this.preorder(list,node.right))}},{key:"inorder",value:function inorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;node.isNull||(this.inorder(list,node.left),list.push(node.value),this.inorder(list,node.right))}},{key:"postorder",value:function postorder(list){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;node.isNull||(this.postorder(list,node.left),this.postorder(list,node.right),list.push(node.value))}},{key:"search",value:function search(value){var node=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.root;return this.clearHighlight(),!node.isNull&&(node.value===value?(node.addHighlight(),this.highlighted=node,!0):node.value>value?this.search(value,node.left):this.search(value,node.right))}},{key:"generateRandomBST",value:function generateRandomBST(num){for(var lower=2*num+10,elements=new Set,i=0;i<num;i++){for(var value=Math.floor(Math.random()*(0-lower+1))+lower;elements.has(value);)value=Math.floor(Math.random()*(0-lower+1))+lower;elements.add(value),this.insert(value)}}},{key:"checkBinaryTree",value:function checkBinaryTree(){var BSTTypeList=[];return this.isBalanced()&&BSTTypeList.push(RedBlackTree_BALANCED),this.isComplete()&&BSTTypeList.push(RedBlackTree_COMPLETE),this.isPerfect()&&BSTTypeList.push(RedBlackTree_PERFECT),this.isFull()&&BSTTypeList.push(RedBlackTree_FULL),BSTTypeList}},{key:"isBalanced",value:function isBalanced(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;if(node.isNull)return!0;var leftH=this.height(node.left),rightH=this.height(node.right);return Math.abs(leftH-rightH)<=1&&(this.isBalanced(node.left)&&this.isBalanced(node.right))}},{key:"height",value:function height(){var ans,node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return node.isNull?-1:(ans=this.height(node.left),(ans=Math.max(this.height(node.right),ans))+1)}},{key:"isComplete",value:function isComplete(){var totalNodes=this.countNodes();return this.isComplete2(0,totalNodes)}},{key:"isComplete2",value:function isComplete2(index,totalNodes){var node=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.root;if(node.isNull)return!0;if(index>=totalNodes)return!1;var ans=this.isComplete2(2*index+1,totalNodes,node.left);return ans&=this.isComplete2(2*index+2,totalNodes,node.right)}},{key:"isPerfect",value:function isPerfect(){return!(!this.isFull()||!this.isComplete())&&this.isPerfect2()}},{key:"isPerfect2",value:function isPerfect2(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root,depth=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(node.isNull)return!0;if(depth++,node.right.isNull&&node.left.isNull){if(-1!==this.leafDepth&&this.leafDepth!==depth)return!1;this.leafDepth=depth}return this.isPerfect2(node.left,depth)&&this.isPerfect2(node.right,depth)}},{key:"isFull",value:function isFull(){var ans,node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return!!node.isNull||(!(!node.left.isNull||!node.right.isNull)||!node.left.isNull&&!node.right.isNull&&(ans=this.isFull(node.left),ans&=this.isFull(node.right)))}},{key:"countNodes",value:function countNodes(){var node=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.root;return node.isNull?0:this.countNodes(node.left)+1+this.countNodes(node.right)}},{key:"clearHighlight",value:function clearHighlight(){this.highlighted&&(this.highlighted.clearHighlight(),this.highlighted=null)}}]),RBT}(),data_structures_RedBlackTree=RBT,RedBlackTree_RedBlackTree=function RedBlackTree(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles),Object(react.useImperativeHandle)(ref,(function(){return{insert:function insert(value){if(null==tree||!tree.root){var newTree=new data_structures_RedBlackTree;return newTree.insert(value),void setTree(newTree)}tree.insert(value),setTree(tree)},remove:function remove(value){return!(null==tree||!tree.root)&&(!!tree.search(value)&&(tree.remove(value),setTree(tree.root?tree:null),!0))},search:function search(value){if(null==tree||!tree.root)return!1;var foundNode=tree.search(value);return foundNode&&setTree(tree),foundNode},getData:function getData(traversalOrder){var traversalData=[];return tree[traversalOrder](traversalData),traversalData},clear:function clear(){setTree(new data_structures_RedBlackTree)},generateRandomTree:function generateRandomTree(countOfNodes){var newTree=new data_structures_RedBlackTree(countOfNodes);setTree(newTree)},checkTreeType:function checkTreeType(){return tree.checkBinaryTree()}}}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new data_structures_RedBlackTree;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};RedBlackTree_RedBlackTree.displayName="RedBlackTree";var RedBlackTree_compareRedBlackTree=function compareRedBlackTree(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_RedBlackTree=react_default.a.memo(Object(react.forwardRef)(RedBlackTree_RedBlackTree),RedBlackTree_compareRedBlackTree);try{RedBlackTree_RedBlackTree.displayName="RedBlackTree",RedBlackTree_RedBlackTree.__docgenInfo={description:"",displayName:"RedBlackTree",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"number[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/RedBlackTree.tsx#RedBlackTree"]={docgenInfo:RedBlackTree_RedBlackTree.__docgenInfo,name:"RedBlackTree",path:"src/components/RedBlackTree.tsx#RedBlackTree"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__(114),__webpack_require__(132),__webpack_require__(435),__webpack_require__(66),__webpack_require__(72),__webpack_require__(434);function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function");subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:!0,configurable:!0}}),superClass&&_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){return o.__proto__=p,o},_setPrototypeOf(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function _createSuperInternal(){var result,Super=_getPrototypeOf(Derived);if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&("object"==typeof call||"function"==typeof call))return call;if(void 0!==call)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(self){if(void 0===self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}(self)}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)},_getPrototypeOf(o)}function Heap_classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function Heap_defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function Heap_createClass(Constructor,protoProps,staticProps){return protoProps&&Heap_defineProperties(Constructor.prototype,protoProps),staticProps&&Heap_defineProperties(Constructor,staticProps),Constructor}var Heap_Heap=function(){function Heap(){var num=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;Heap_classCallCheck(this,Heap),this.end=void 0,this.heap=void 0,this.currentJSX=void 0,this.end=0,this.heap=[],this.currentJSX=null,num&&this.generateRandomHeap(num)}return Heap_createClass(Heap,[{key:"heapifyUp",value:function heapifyUp(j){console.error(j+": Base class's heapifyUp called")}},{key:"heapifyDown",value:function heapifyDown(){var j=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;console.error(j+": Base class's heapifyDown called")}},{key:"isEmpty",value:function isEmpty(){return 0===this.end}},{key:"insert",value:function insert(value){this.heap[this.end]=value,this.heapifyUp(this.end++),this.currentJSX=this.updateJSX()}},{key:"removeTop",value:function removeTop(){if(this.isEmpty())return null;var poppedTopElement=this.heap[0];return this.heap[0]=this.heap[--this.end],this.heapifyDown(),this.heap.pop(),this.currentJSX=this.updateJSX(),poppedTopElement}},{key:"deleteEl",value:function deleteEl(value){var isMinHeap=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],index=this.heap.indexOf(value);-1!==index&&(this.heap[index]=isMinHeap?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,this.heapifyUp(index),this.removeTop())}},{key:"updateJSX",value:function updateJSX(){var parentIndex=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;if(!this.end)return null;var child1Index=2*parentIndex+1,child2Index=child1Index+1;if(child2Index>=this.end&&child1Index>=this.end)return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal",children:this.heap[parentIndex]}),Object(jsx_runtime.jsxs)("ul",{children:[Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{className:"null",children:"null"})}),Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{className:"null",children:"null"})})]})]},parentIndex);if(child2Index>=this.end&&child1Index<this.end){var child1JSX=this.updateJSX(child1Index);return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal",children:this.heap[parentIndex]}),Object(jsx_runtime.jsxs)("ul",{children:[child1JSX,Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{className:"null",children:"null"})})]})]},parentIndex)}if(child2Index<this.end&&child1Index>=this.end){var child2JSX=this.updateJSX(child2Index);return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal",children:this.heap[parentIndex]}),Object(jsx_runtime.jsxs)("ul",{children:[Object(jsx_runtime.jsx)("li",{className:"null",children:Object(jsx_runtime.jsx)("div",{className:"null",children:"null"})}),child2JSX]})]},parentIndex)}var _child1JSX=this.updateJSX(child1Index),_child2JSX=this.updateJSX(child2Index);return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("div",{className:"normal",children:this.heap[parentIndex]}),Object(jsx_runtime.jsxs)("ul",{children:[_child1JSX,_child2JSX]})]},parentIndex)}},{key:"generateRandomHeap",value:function generateRandomHeap(num){for(var lower=2*num+10,elements=new Set,i=0;i<num;i++){for(var value=Math.floor(Math.random()*(0-lower+1))+lower;elements.has(value);)value=Math.floor(Math.random()*(0-lower+1))+lower;elements.add(value),this.insert(value)}}}]),Heap}(),Heap_MinHeap=function(_Heap){_inherits(MinHeap,_Heap);var _super=_createSuper(MinHeap);function MinHeap(){return Heap_classCallCheck(this,MinHeap),_super.apply(this,arguments)}return Heap_createClass(MinHeap,[{key:"heapifyUp",value:function heapifyUp(childIndex){if(0!==childIndex){var parentIndex=childIndex;if(parentIndex%2==0?parentIndex-=2:parentIndex--,parentIndex/=2,this.heap[parentIndex]>this.heap[childIndex]){var _ref=[this.heap[childIndex],this.heap[parentIndex]];this.heap[parentIndex]=_ref[0],this.heap[childIndex]=_ref[1],this.heapifyUp(parentIndex)}}}},{key:"heapifyDown",value:function heapifyDown(){var parentIndex=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,child1Index=2*parentIndex+1,child2Index=child1Index+1;if(!(child2Index>=this.end&&child1Index>=this.end))if(child2Index>=this.end&&child1Index<this.end){if(this.heap[child1Index]<this.heap[parentIndex]){var _ref2=[this.heap[child1Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref2[0],this.heap[child1Index]=_ref2[1],this.heapifyDown(child1Index)}}else if(child2Index<this.end&&child1Index>=this.end){if(this.heap[child2Index]<this.heap[parentIndex]){var _ref3=[this.heap[child2Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref3[0],this.heap[child2Index]=_ref3[1],this.heapifyDown(child2Index)}}else if(this.heap[parentIndex]>this.heap[child1Index]||this.heap[parentIndex]>this.heap[child2Index])if(this.heap[child1Index]<this.heap[child2Index]){var _ref4=[this.heap[child1Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref4[0],this.heap[child1Index]=_ref4[1],this.heapifyDown(child1Index)}else{var _ref5=[this.heap[child2Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref5[0],this.heap[child2Index]=_ref5[1],this.heapifyDown(child2Index)}}},{key:"remove",value:function remove(value){return this.deleteEl(value)}}]),MinHeap}(Heap_Heap),Heap_MaxHeap=function(_Heap2){_inherits(MaxHeap,_Heap2);var _super2=_createSuper(MaxHeap);function MaxHeap(){return Heap_classCallCheck(this,MaxHeap),_super2.apply(this,arguments)}return Heap_createClass(MaxHeap,[{key:"heapifyUp",value:function heapifyUp(childIndex){if(0!==childIndex){var parentIndex=childIndex;if(parentIndex%2==0?parentIndex-=2:parentIndex--,parentIndex/=2,this.heap[parentIndex]<this.heap[childIndex]){var _ref6=[this.heap[childIndex],this.heap[parentIndex]];this.heap[parentIndex]=_ref6[0],this.heap[childIndex]=_ref6[1],this.heapifyUp(parentIndex)}}}},{key:"heapifyDown",value:function heapifyDown(){var parentIndex=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,child1Index=2*parentIndex+1,child2Index=child1Index+1;if(!(child2Index>=this.end&&child1Index>=this.end))if(child2Index>=this.end&&child1Index<this.end){if(this.heap[child1Index]>this.heap[parentIndex]){var _ref7=[this.heap[child1Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref7[0],this.heap[child1Index]=_ref7[1],this.heapifyDown(child1Index)}}else if(child2Index<this.end&&child1Index>=this.end){if(this.heap[child2Index]>this.heap[parentIndex]){var _ref8=[this.heap[child2Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref8[0],this.heap[child2Index]=_ref8[1],this.heapifyDown(child2Index)}}else if(this.heap[parentIndex]<this.heap[child1Index]||this.heap[parentIndex]<this.heap[child2Index])if(this.heap[child1Index]>this.heap[child2Index]){var _ref9=[this.heap[child1Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref9[0],this.heap[child1Index]=_ref9[1],this.heapifyDown(child1Index)}else{var _ref10=[this.heap[child2Index],this.heap[parentIndex]];this.heap[parentIndex]=_ref10[0],this.heap[child2Index]=_ref10[1],this.heapifyDown(child2Index)}}},{key:"remove",value:function remove(value){return this.deleteEl(value,!1)}}]),MaxHeap}(Heap_Heap),MinHeap_MinHeap=function MinHeap(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles),Object(react.useImperativeHandle)(ref,(function(){return{insert:function insert(value){if(null!=tree&&tree.isEmpty()){var newTree=new Heap_MinHeap;return newTree.insert(value),void setTree(newTree)}tree.insert(value),setTree(tree)},remove:function remove(value){return(null==tree||!tree.isEmpty())&&(tree.remove(value),setTree(tree),!0)},getData:function getData(){return tree.heap},clear:function clear(){setTree(new Heap_MinHeap)},generateRandomTree:function generateRandomTree(countOfNodes){var newTree=new Heap_MinHeap(countOfNodes);setTree(newTree)},extractTop:function extractTop(){var top=tree.removeTop();return setTree(tree),top}}}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new Heap_MinHeap;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};MinHeap_MinHeap.displayName="MinHeap";var MinHeap_compareHeap=function compareHeap(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_MinHeap=react_default.a.memo(Object(react.forwardRef)(MinHeap_MinHeap),MinHeap_compareHeap);try{MinHeap_MinHeap.displayName="MinHeap",MinHeap_MinHeap.__docgenInfo={description:"",displayName:"MinHeap",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"number[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/MinHeap.tsx#MinHeap"]={docgenInfo:MinHeap_MinHeap.__docgenInfo,name:"MinHeap",path:"src/components/MinHeap.tsx#MinHeap"})}catch(__react_docgen_typescript_loader_error){}var MaxHeap_MaxHeap=function MaxHeap(_ref,ref){var data=_ref.data,treeStyles=_ref.treeStyles,_useTreeState=hooks_useTreeState(null),tree=_useTreeState.tree,treeJSX=_useTreeState.treeJSX,setTree=_useTreeState.setTree;hooks_useTreeStyle(treeStyles),Object(react.useImperativeHandle)(ref,(function(){return{insert:function insert(value){if(null!=tree&&tree.isEmpty()){var newTree=new Heap_MaxHeap;return newTree.insert(value),void setTree(newTree)}tree.insert(value),setTree(tree)},remove:function remove(value){return(null==tree||!tree.isEmpty())&&(tree.remove(value),setTree(tree),!0)},getData:function getData(){return tree.heap},clear:function clear(){setTree(new Heap_MaxHeap)},generateRandomTree:function generateRandomTree(countOfNodes){var newTree=new Heap_MaxHeap(countOfNodes);setTree(newTree)},extractTop:function extractTop(){var top=tree.removeTop();return setTree(tree),top}}}));return Object(react.useEffect)((function(){data&&function handleData(){var newTree=new Heap_MaxHeap;data.forEach((function(elem){return newTree.insert(elem)})),setTree(newTree)}()}),[data]),Object(jsx_runtime.jsx)("div",{id:constants.j,children:Object(jsx_runtime.jsx)("ul",{children:treeJSX})})};MaxHeap_MaxHeap.displayName="MaxHeap";var MaxHeap_compareHeap=function compareHeap(previousPros,newProps){return previousPros.data&&newProps.data&&Object(util.a)(previousPros.data,newProps.data)},components_MaxHeap=react_default.a.memo(Object(react.forwardRef)(MaxHeap_MaxHeap),MaxHeap_compareHeap);try{MaxHeap_MaxHeap.displayName="MaxHeap",MaxHeap_MaxHeap.__docgenInfo={description:"",displayName:"MaxHeap",props:{data:{defaultValue:null,description:"",name:"data",required:!1,type:{name:"number[]"}},treeStyles:{defaultValue:null,description:"",name:"treeStyles",required:!1,type:{name:"TreeStylesType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/MaxHeap.tsx#MaxHeap"]={docgenInfo:MaxHeap_MaxHeap.__docgenInfo,name:"MaxHeap",path:"src/components/MaxHeap.tsx#MaxHeap"})}catch(__react_docgen_typescript_loader_error){}function useBinarySearchTree_slicedToArray(arr,i){return function useBinarySearchTree_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function useBinarySearchTree_iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function useBinarySearchTree_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return useBinarySearchTree_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return useBinarySearchTree_arrayLikeToArray(o,minLen)}(arr,i)||function useBinarySearchTree_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function useBinarySearchTree_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useBinarySearchTree=function useBinarySearchTree(){var ref=Object(react.useRef)(null),_useState2=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),insertFunction=_useState2[0],setInsertFunction=_useState2[1],_useState4=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),removeFunction=_useState4[0],setRemoveFunction=_useState4[1],_useState6=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),searchFunction=_useState6[0],setSearchFunction=_useState6[1],_useState8=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),getDataFunction=_useState8[0],setGetDataFunction=_useState8[1],_useState10=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),clearFunction=_useState10[0],setClearFunction=_useState10[1],_useState12=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),balanceFunction=_useState12[0],setBalanceFunction=_useState12[1],_useState14=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),generateRandomTreeFunction=_useState14[0],setGenerateRandomTreeFunction=_useState14[1],_useState16=useBinarySearchTree_slicedToArray(Object(react.useState)(null),2),checkTreeTypeFunction=_useState16[0],setCheckTreeTypeFunction=_useState16[1];return Object(react.useEffect)((function(){setInsertFunction((function(){return function(value){var _ref$current;return null==ref||null===(_ref$current=ref.current)||void 0===_ref$current?void 0:_ref$current.insert(value)}})),setRemoveFunction((function(){return function(value){var _ref$current2;return null==ref||null===(_ref$current2=ref.current)||void 0===_ref$current2?void 0:_ref$current2.remove(value)}})),setSearchFunction((function(){return function(value){var _ref$current3;return null==ref||null===(_ref$current3=ref.current)||void 0===_ref$current3?void 0:_ref$current3.search(value)}})),setGetDataFunction((function(){return function(traversalOrder){var _ref$current4;return null==ref||null===(_ref$current4=ref.current)||void 0===_ref$current4?void 0:_ref$current4.getData(traversalOrder)}})),setClearFunction((function(){return function(){var _ref$current5;return null==ref||null===(_ref$current5=ref.current)||void 0===_ref$current5?void 0:_ref$current5.clear()}})),setBalanceFunction((function(){return function(){var _ref$current6;return null==ref||null===(_ref$current6=ref.current)||void 0===_ref$current6?void 0:_ref$current6.balance()}})),setGenerateRandomTreeFunction((function(){return function(countOfNodes){var _ref$current7;return null==ref||null===(_ref$current7=ref.current)||void 0===_ref$current7?void 0:_ref$current7.generateRandomTree(countOfNodes)}})),setCheckTreeTypeFunction((function(){return function(){var _ref$current8;return null==ref||null===(_ref$current8=ref.current)||void 0===_ref$current8?void 0:_ref$current8.checkTreeType()}}))}),[ref]),{ref:ref,insert:insertFunction,remove:removeFunction,search:searchFunction,getData:getDataFunction,clear:clearFunction,balance:balanceFunction,generateRandomTree:generateRandomTreeFunction,checkTreeType:checkTreeTypeFunction}};function useTrie_slicedToArray(arr,i){return function useTrie_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function useTrie_iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function useTrie_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return useTrie_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return useTrie_arrayLikeToArray(o,minLen)}(arr,i)||function useTrie_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function useTrie_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useTrie=function useTrie(){var ref=Object(react.useRef)(null),_useState2=useTrie_slicedToArray(Object(react.useState)(null),2),insert=_useState2[0],setInsert=_useState2[1],_useState4=useTrie_slicedToArray(Object(react.useState)(null),2),remove=_useState4[0],setRemove=_useState4[1],_useState6=useTrie_slicedToArray(Object(react.useState)(null),2),search=_useState6[0],setSearch=_useState6[1],_useState8=useTrie_slicedToArray(Object(react.useState)(null),2),searchPrefix=_useState8[0],setSearchPrefix=_useState8[1],_useState10=useTrie_slicedToArray(Object(react.useState)(null),2),getAllWords=_useState10[0],setGetAllWords=_useState10[1],_useState12=useTrie_slicedToArray(Object(react.useState)(null),2),generateRandomTrie=_useState12[0],setGenerateRandomTrie=_useState12[1],_useState14=useTrie_slicedToArray(Object(react.useState)(null),2),removeHighlight=_useState14[0],setRemoveHighlight=_useState14[1];return Object(react.useEffect)((function(){setInsert((function(){return function(word){var _ref$current;return null==ref||null===(_ref$current=ref.current)||void 0===_ref$current?void 0:_ref$current.insert(word)}})),setRemove((function(){return function(word){var _ref$current2;return null==ref||null===(_ref$current2=ref.current)||void 0===_ref$current2?void 0:_ref$current2.remove(word)}})),setSearch((function(){return function(word){var _ref$current3;return null==ref||null===(_ref$current3=ref.current)||void 0===_ref$current3?void 0:_ref$current3.search(word)}})),setSearchPrefix((function(){return function(word){var _ref$current4;return null==ref||null===(_ref$current4=ref.current)||void 0===_ref$current4?void 0:_ref$current4.searchPrefix(word)}})),setGetAllWords((function(){return function(){var _ref$current5;return null==ref||null===(_ref$current5=ref.current)||void 0===_ref$current5?void 0:_ref$current5.getAllWords()}})),setGenerateRandomTrie((function(){return function(num){var _ref$current6;return null==ref||null===(_ref$current6=ref.current)||void 0===_ref$current6?void 0:_ref$current6.generateRandomTrie(num)}})),setRemoveHighlight((function(){return function(){var _ref$current7;return null==ref||null===(_ref$current7=ref.current)||void 0===_ref$current7?void 0:_ref$current7.removeHighlight()}}))}),[ref]),{ref:ref,insert:insert,generateRandomTrie:generateRandomTrie,getAllWords:getAllWords,remove:remove,search:search,searchPrefix:searchPrefix,removeHighlight:removeHighlight}};function useSelfBalancingTree_slicedToArray(arr,i){return function useSelfBalancingTree_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function useSelfBalancingTree_iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function useSelfBalancingTree_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return useSelfBalancingTree_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return useSelfBalancingTree_arrayLikeToArray(o,minLen)}(arr,i)||function useSelfBalancingTree_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function useSelfBalancingTree_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useSelfBalancingTree=function useSelfBalancingTree(){var ref=Object(react.useRef)(null),_useState2=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),insertFunction=_useState2[0],setInsertFunction=_useState2[1],_useState4=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),removeFunction=_useState4[0],setRemoveFunction=_useState4[1],_useState6=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),searchFunction=_useState6[0],setSearchFunction=_useState6[1],_useState8=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),getDataFunction=_useState8[0],setGetDataFunction=_useState8[1],_useState10=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),clearFunction=_useState10[0],setClearFunction=_useState10[1],_useState12=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),generateRandomTreeFunction=_useState12[0],setGenerateRandomTreeFunction=_useState12[1],_useState14=useSelfBalancingTree_slicedToArray(Object(react.useState)(null),2),checkTreeTypeFunction=_useState14[0],setCheckTreeTypeFunction=_useState14[1];return Object(react.useEffect)((function(){setInsertFunction((function(){return function(value){var _ref$current;return null==ref||null===(_ref$current=ref.current)||void 0===_ref$current?void 0:_ref$current.insert(value)}})),setRemoveFunction((function(){return function(value){var _ref$current2;return null==ref||null===(_ref$current2=ref.current)||void 0===_ref$current2?void 0:_ref$current2.remove(value)}})),setSearchFunction((function(){return function(value){var _ref$current3;return null==ref||null===(_ref$current3=ref.current)||void 0===_ref$current3?void 0:_ref$current3.search(value)}})),setGetDataFunction((function(){return function(traversalOrder){var _ref$current4;return null==ref||null===(_ref$current4=ref.current)||void 0===_ref$current4?void 0:_ref$current4.getData(traversalOrder)}})),setClearFunction((function(){return function(){var _ref$current5;return null==ref||null===(_ref$current5=ref.current)||void 0===_ref$current5?void 0:_ref$current5.clear()}})),setGenerateRandomTreeFunction((function(){return function(countOfNodes){var _ref$current6;return null==ref||null===(_ref$current6=ref.current)||void 0===_ref$current6?void 0:_ref$current6.generateRandomTree(countOfNodes)}})),setCheckTreeTypeFunction((function(){return function(){var _ref$current7;return null==ref||null===(_ref$current7=ref.current)||void 0===_ref$current7?void 0:_ref$current7.checkTreeType()}}))}),[ref]),{ref:ref,insert:insertFunction,remove:removeFunction,search:searchFunction,getData:getDataFunction,clear:clearFunction,generateRandomTree:generateRandomTreeFunction,checkTreeType:checkTreeTypeFunction}};function useHeap_slicedToArray(arr,i){return function useHeap_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function useHeap_iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function useHeap_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return useHeap_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return useHeap_arrayLikeToArray(o,minLen)}(arr,i)||function useHeap_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function useHeap_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var hooks_useHeap=function useHeap(){var ref=Object(react.useRef)(null),_useState2=useHeap_slicedToArray(Object(react.useState)(null),2),insertFunction=_useState2[0],setInsertFunction=_useState2[1],_useState4=useHeap_slicedToArray(Object(react.useState)(null),2),removeFunction=_useState4[0],setRemoveFunction=_useState4[1],_useState6=useHeap_slicedToArray(Object(react.useState)(null),2),clearFunction=_useState6[0],setClearFunction=_useState6[1],_useState8=useHeap_slicedToArray(Object(react.useState)(null),2),generateRandomTreeFunction=_useState8[0],setGenerateRandomTreeFunction=_useState8[1],_useState10=useHeap_slicedToArray(Object(react.useState)(null),2),extractTopFunction=_useState10[0],setExtractTopFunction=_useState10[1],_useState12=useHeap_slicedToArray(Object(react.useState)(null),2),getDataFunction=_useState12[0],setGetDataFunction=_useState12[1];return Object(react.useEffect)((function(){setInsertFunction((function(){return function(value){var _ref$current;return null==ref||null===(_ref$current=ref.current)||void 0===_ref$current?void 0:_ref$current.insert(value)}})),setRemoveFunction((function(){return function(value){var _ref$current2;return null==ref||null===(_ref$current2=ref.current)||void 0===_ref$current2?void 0:_ref$current2.remove(value)}})),setClearFunction((function(){return function(){var _ref$current3;return null==ref||null===(_ref$current3=ref.current)||void 0===_ref$current3?void 0:_ref$current3.clear()}})),setGenerateRandomTreeFunction((function(){return function(countOfNodes){var _ref$current4;return null==ref||null===(_ref$current4=ref.current)||void 0===_ref$current4?void 0:_ref$current4.generateRandomTree(countOfNodes)}})),setExtractTopFunction((function(){return function(){var _ref$current5;return null==ref||null===(_ref$current5=ref.current)||void 0===_ref$current5?void 0:_ref$current5.extractTop()}})),setGetDataFunction((function(){return function(){var _ref$current6;return null==ref||null===(_ref$current6=ref.current)||void 0===_ref$current6?void 0:_ref$current6.getData()}}))}),[ref]),{ref:ref,insert:insertFunction,remove:removeFunction,clear:clearFunction,generateRandomTree:generateRandomTreeFunction,extractTop:extractTopFunction,getData:getDataFunction}}},38:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return compareArray})),__webpack_require__.d(__webpack_exports__,"c",(function(){return handleStyleArgTypes})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getTreeStylesInTableDataFormat}));__webpack_require__(67),__webpack_require__(71),__webpack_require__(78),__webpack_require__(25),__webpack_require__(5),__webpack_require__(10),__webpack_require__(73),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);var _constants__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(24);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var compareArray=function compareArray(array1,array2){if(array1.length!==array2.length)return!1;for(var i=0;i<array1.length;i++)if(array1[i]!==array2[i])return!1;return!0},handleStyleArgTypes=function handleStyleArgTypes(){for(var argTypes={},_i2=0,_Object$entries=Object.entries(_constants__WEBPACK_IMPORTED_MODULE_15__.f);_i2<_Object$entries.length;_i2++){var _ref2=_slicedToArray(_Object$entries[_i2],2),style=_ref2[0],defaultValue=_ref2[1].defaultValue;argTypes[style]={control:{type:style.includes("Color")?"color":"text"},defaultValue:defaultValue}}return argTypes},getTreeStylesInTableDataFormat=function getTreeStylesInTableDataFormat(){var data={head:[],body:[]};return data.head=["Property","Type","Description","Default"],data.body=Object.entries(_constants__WEBPACK_IMPORTED_MODULE_15__.f).map((function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],_ref4$=_ref4[1];return["<code>"+key+"</code>","<code>string</code>",_ref4$.description,"<code>"+_ref4$.defaultValue+"</code>"]})),data}},443:function(module,exports,__webpack_require__){var api=__webpack_require__(847),content=__webpack_require__(848);"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.i,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},489:function(module,exports,__webpack_require__){__webpack_require__(490),__webpack_require__(645),__webpack_require__(646),__webpack_require__(855),__webpack_require__(851),__webpack_require__(857),__webpack_require__(858),__webpack_require__(856),__webpack_require__(852),__webpack_require__(859),__webpack_require__(853),__webpack_require__(854),__webpack_require__(860),module.exports=__webpack_require__(844)},51:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(25),__webpack_require__(0);var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),Table=function Table(_ref){var _ref$data=_ref.data,head=_ref$data.head,body=_ref$data.body;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("table",{className:"storybook-table",children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("thead",{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("tr",{children:head.map((function(columnHeading){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("th",{children:columnHeading},columnHeading)}))})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("tbody",{children:body.map((function(row,index){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("tr",{children:row.map((function(cell){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("td",{dangerouslySetInnerHTML:{__html:cell}},cell)}))},index)}))})]})};Table.displayName="Table",__webpack_exports__.a=Table;try{Table.displayName="Table",Table.__docgenInfo={description:"",displayName:"Table",props:{data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"TableDataType"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/stories/docs/components/Table.tsx#Table"]={docgenInfo:Table.__docgenInfo,name:"Table",path:"src/stories/docs/components/Table.tsx#Table"})}catch(__react_docgen_typescript_loader_error){}},556:function(module,exports){},646:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(353)},844:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(353).configure)([__webpack_require__(845)],module,!1)}).call(this,__webpack_require__(211)(module))},845:function(module,exports,__webpack_require__){var map={"./stories/AVLTree.stories.tsx":861,"./stories/BinarySearchTree.stories.tsx":862,"./stories/MaxHeap.stories.tsx":863,"./stories/MinHeap.stories.tsx":864,"./stories/RedBlackTree.stories.tsx":865,"./stories/TreeStyles.stories.mdx":850,"./stories/Trie.stories.tsx":866};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=845},848:function(module,exports,__webpack_require__){(exports=__webpack_require__(849)(!1)).push([module.i,"#react-tree-vis {\n  --line-color: #ccc;\n  --line-hover-color: #5f6674;\n  --line-radius: 5px;\n\n  --node-border: none;\n  --node-border-radius: 200px;\n  --node-bg-color: #fff;\n  --node-font-color: #666;\n  --node-shadow: -5px -5px 20px #fff, 5px 5px 20px #babecc;\n  --node-text-shadow: none;\n  /* FIXME: Undocumented */\n  --node-font-size: 20px;\n  --node-font-family: arial, verdana, tahoma;\n  --node-avl-height-font-size: 13px;\n  --node-red-bg-color: #da6060;\n  --node-black-bg-color: #acacac;\n  /* FIXME: Undocumented over */\n\n  /* highlighted node */\n  --node-hl-border: none;\n  --node-hl-bg-color: #fff;\n  --node-hl-font-color: #fff;\n  --node-hl-shadow: -5px -5px 20px #fff, 5px 5px 20px #babecc;\n  --node-hl-text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #00ff15,\n    0 0 20px #00ff15, 0 0 25px #00ff15, 0 0 30px #00ff15, 0 0 35px #00ff15;\n\n  --node-hover-border: none;\n  --node-hover-bg-color: #fff;\n  --node-hover-font-color: #002574;\n  --node-hover-shadow: -1px -1px 5px #fff, 1px 1px 5px #babecc;\n  --node-hover-text-shadow: none;\n\n  --node-null-font-color: #7c7c7c2f;\n  --node-null-hover-font-color: #ff0000b9;\n\n  --transition: 0.5s;\n}\n\n#react-tree-vis ul {\n  padding: 0;\n  padding-top: 20px;\n  position: relative;\n  transition: all var(--transition);\n}\n\n#react-tree-vis > ul {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  margin: 0 auto;\n}\n\n#react-tree-vis li {\n  float: left;\n  text-align: center;\n  list-style-type: none;\n  position: relative;\n  padding: 10px 1px 0 1px;\n  transition: all var(--transition);\n}\n\n/* Line Styles */\n#react-tree-vis li::before,\n#react-tree-vis li::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 50%;\n  border-top: 1px solid var(--line-color);\n  width: 50%;\n  height: 10px;\n  transition: all var(--transition);\n}\n\n#react-tree-vis li::after {\n  right: auto;\n  left: 50%;\n  border-left: 1px solid var(--line-color);\n}\n\n#react-tree-vis li:last-child::before {\n  border-right: 1px solid var(--line-color);\n  border-radius: 0 var(--line-radius) 0 0;\n}\n\n#react-tree-vis li:first-child::after {\n  border-radius: var(--line-radius) 0 0 0;\n}\n\n#react-tree-vis ul ul::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 50%;\n  border-left: 1px solid var(--line-color);\n  width: 0;\n  height: 20px;\n  transition: all var(--transition);\n}\n\n#react-tree-vis li:only-child::after,\n#react-tree-vis li:only-child::before {\n  display: none;\n}\n\n#react-tree-vis li:only-child {\n  padding-top: 0;\n}\n\n#react-tree-vis li:first-child::before,\n#react-tree-vis li:last-child::after {\n  border: 0 none;\n}\n\n/* Node Styles starts */\n#react-tree-vis li div {\n  padding: 6px 12px;\n  text-decoration: none;\n  color: var(--node-font-color);\n  font-family: var(--node-font-family);\n  font-size: var(--node-font-size);\n  display: inline-block;\n  box-shadow: var(--node-shadow);\n  text-shadow: var(--node-text-shadow);\n  border-radius: var(--node-border-radius);\n  border: var(--node-border);\n  background-color: var(--node-bg-color);\n  transition: all var(--transition);\n}\n\n#react-tree-vis li div.end {\n  color: #c20000;\n}\n\n#react-tree-vis li div.red {\n  background-color: var(--node-red-bg-color);\n}\n\n#react-tree-vis li div.black {\n  background-color: var(--node-black-bg-color);\n}\n\n#react-tree-vis li div.highlight {\n  background-color: var(--node-hl-bg-color);\n  border: var(--node-hl-border);\n  box-shadow: var(--node-hl-shadow);\n  color: var(--node-hl-font-color);\n  text-shadow: var(--node-hl-text-shadow);\n}\n\n/* Hover Styles starts */\n#react-tree-vis li div:hover {\n  border: var(--node-hover-border);\n  color: var(--node-hover-font-color);\n  background-color: var(--node-hover-bg-color);\n  box-shadow: var(--node-hover-shadow);\n  text-shadow: var(--node-hover-text-shadow);\n}\n\n#react-tree-vis li div:hover + ul li::after,\n#react-tree-vis li div:hover + ul li::before,\n#react-tree-vis li div:hover + ul::before,\n#react-tree-vis li div:hover + ul ul::before {\n  border-color: var(--line-hover-color);\n}\n\n#react-tree-vis li.null div {\n  color: var(--node-null-font-color);\n}\n\n#react-tree-vis li.null div:hover {\n  color: var(--node-null-hover-font-color);\n}\n\n#react-tree-vis .height {\n  font-size: var(--node-avl-height-font-size);\n}\n",""]),module.exports=exports},850:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(20),__webpack_require__(114),__webpack_require__(5),__webpack_require__(15),__webpack_require__(0);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(4),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(230),_docs_components_Table__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(51),_util__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(38),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_6__.b,{title:"Styles/treeStyles object",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("h1",{id:"tree-styles"},"Tree Styles"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("p",null,"An object with properties described below can be passed to ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("inlineCode",{parentName:"p"},"treeStyles")," prop to override default styles."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)(_docs_components_Table__WEBPACK_IMPORTED_MODULE_7__.a,{data:Object(_util__WEBPACK_IMPORTED_MODULE_8__.b)(),mdxType:"Table"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("h5",{id:"-nodes-searched-successfully-in-the-tree-are-highlighted"},"*"," Nodes searched successfully in the tree are highlighted."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("p",null,"All tree stories allow you to play around with styles! (Refresh to apply styles. Working on improving UX here. Here is a rabbit for inconvenience caused. 🐰)"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("p",null,"Feel styling options are limited? You can always override them with CSS. All the tree components are given id ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("inlineCode",{parentName:"p"},"react-tree-vis"),". Refer to ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("a",{parentName:"p",href:"https://github.com/VandanRogheliya/react-tree-vis/blob/master/src/styles/BinarySearchTree.css",target:"_blank",rel:"nofollow noopener noreferrer"},"this CSS file")," for selectors. Also check out ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)("a",{parentName:"p",href:"https://codesandbox.io/s/overriding-css-mwp9b?file=/src/styles.css",target:"_blank",rel:"nofollow noopener noreferrer"},"this codesandbox example"),"."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Styles/treeStyles object",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_6__.a,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__.b)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},860:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,"parameters",(function(){return parameters}));__webpack_require__(20),__webpack_require__(5),__webpack_require__(55),__webpack_require__(433),__webpack_require__(126),__webpack_require__(40),__webpack_require__(842),__webpack_require__(843),__webpack_require__(124);var client_api=__webpack_require__(873),esm=__webpack_require__(7),parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}}};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":case"argTypes":return esm.a.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify(value));case"decorators":return value.forEach((function(decorator){return Object(client_api.c)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return Object(client_api.d)(loader,!1)}));case"parameters":return Object(client_api.e)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return Object(client_api.a)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return Object(client_api.b)(enhancer)}));case"render":return Object(client_api.g)(value);case"globals":case"globalTypes":var v={};return v[key]=value,Object(client_api.e)(v,!1);default:return console.log(key+" was not supported :( !")}}))},861:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SimpleExample",(function(){return AVLTree_stories_SimpleExample})),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return AVLTree_stories_AllFunctions}));__webpack_require__(60),__webpack_require__(28),__webpack_require__(125),__webpack_require__(15),__webpack_require__(25),__webpack_require__(26),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);var react=__webpack_require__(0),src=__webpack_require__(34),util=__webpack_require__(38),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"avl-tree"},"AVL Tree"),Object(esm.b)("p",null,"It organizes numbers in a self balancing binary search tree and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},'const Component = () => {\n  const { ref, insert } = useAVLTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <AVLTree ref={ref} data={[2, 1, 3]} />\n    </>\n  )\n}\n')),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.b,mdxType:"Table"}),Object(esm.b)("h2",{id:"useavltree"},"useAVLTree"),Object(esm.b)("p",null,"This hook allows you to interact with your tree. Insert, remove, search and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.a,mdxType:"Table"}),Object(esm.b)("h5",{id:"traversalordertype--inorder--postorder--preorder"},Object(esm.b)("inlineCode",{parentName:"h5"},"TraversalOrderType = 'inorder' | 'postorder' | 'preorder'")),Object(esm.b)("h5",{id:"binarytreechecktype--balanced--complete--perfect--full-"},Object(esm.b)("inlineCode",{parentName:"h5"},"BinaryTreeCheckType = 'balanced' | 'complete' | 'perfect' | 'full' ")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function AVLTree_stories_extends(){return AVLTree_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},AVLTree_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/AVL Tree",component:src.a,argTypes:Object(util.c)(),parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React, { useState } from \'react\'\\nimport { Meta, Story } from \'@storybook/react\'\\nimport { AVLTree, useAVLTree } from \'../index\'\\nimport { handleStyleArgTypes } from \'../util\'\\nimport AVLTreeDoc from \'./docs/AVLTreeDoc.mdx\'\\n\\nexport default {\\n  title: \'Tree/AVL Tree\',\\n  component: AVLTree,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: AVLTreeDoc } },\\n} as Meta\\n\\nexport const SimpleExample: Story = ({ ...args }) => {\\n  const { ref, insert, remove, search } = useAVLTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <AVLTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useAVLTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <AVLTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"SimpleExample":{"startLoc":{"col":36,"line":14},"endLoc":{"col":1,"line":54},"startBody":{"col":36,"line":14},"endBody":{"col":1,"line":54}},"AllFunctions":{"startLoc":{"col":35,"line":56},"endLoc":{"col":1,"line":149},"startBody":{"col":35,"line":56},"endBody":{"col":1,"line":149}}};\n    \nimport React, { useState } from \'react\'\nimport { Meta, Story } from \'@storybook/react\'\nimport { AVLTree, useAVLTree } from \'../index\'\nimport { handleStyleArgTypes } from \'../util\'\nimport AVLTreeDoc from \'./docs/AVLTreeDoc.mdx\'\n\nexport default {\n  title: \'Tree/AVL Tree\',\n  component: AVLTree,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: AVLTreeDoc } },\n} as Meta\n\nexport const SimpleExample: Story = ({ ...args }) => {\n  const { ref, insert, remove, search } = useAVLTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\n      </div>\n      <AVLTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    generateRandomTree,\n    checkTreeType,\n  } = useAVLTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData(\'inorder\'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <AVLTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\n\nSimpleExample.parameters = { storySource: { source: "({ ...args }) => {\\n  const { ref, insert, remove, search } = useAVLTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <AVLTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...SimpleExample.parameters };\nAllFunctions.parameters = { storySource: { source: "({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useAVLTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <AVLTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...AllFunctions.parameters };',locationsMap:{"simple-example":{startLoc:{col:36,line:22},endLoc:{col:1,line:62},startBody:{col:36,line:22},endBody:{col:1,line:62}},"all-functions":{startLoc:{col:35,line:64},endLoc:{col:1,line:157},startBody:{col:35,line:64},endBody:{col:1,line:157}}}},docs:{page:MDXContent}}};var AVLTree_stories_SimpleExample=function SimpleExample(_ref){var args=AVLTree_stories_extends({},_ref),_useAVLTree=Object(src.g)(),ref=_useAVLTree.ref,insert=_useAVLTree.insert,remove=_useAVLTree.remove,search=_useAVLTree.search,_useState2=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState6[0],setSearchValue=_useState6[1],_useState8=_slicedToArray(Object(react.useState)(!1),2),found=_useState8[0],setFound=_useState8[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("p",{children:["Found: ",found?"Yes":"No"]})]}),Object(jsx_runtime.jsx)(src.a,{ref:ref,data:[2,1,3],treeStyles:Object.assign({},args)})]})},AVLTree_stories_AllFunctions=function AllFunctions(_ref2){var args=AVLTree_stories_extends({},_ref2),_useAVLTree2=Object(src.g)(),ref=_useAVLTree2.ref,insert=_useAVLTree2.insert,remove=_useAVLTree2.remove,search=_useAVLTree2.search,getData=_useAVLTree2.getData,clear=_useAVLTree2.clear,generateRandomTree=_useAVLTree2.generateRandomTree,checkTreeType=_useAVLTree2.checkTreeType,_useState10=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState10[0],setInsertValue=_useState10[1],_useState12=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState12[0],setRemoveValue=_useState12[1],_useState14=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState14[0],setSearchValue=_useState14[1],_useState16=_slicedToArray(Object(react.useState)(0),2),randomValue=_useState16[0],setRandomValue=_useState16[1],_useState18=_slicedToArray(Object(react.useState)(!1),2),found=_useState18[0],setFound=_useState18[1],_useState20=_slicedToArray(Object(react.useState)([]),2),data=_useState20[0],setData=_useState20[1],_useState22=_slicedToArray(Object(react.useState)([]),2),treeType=_useState22[0],setTreeType=_useState22[1],_useState24=_slicedToArray(Object(react.useState)([1,2,3]),2),defaultData=_useState24[0],setDefaultData=_useState24[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))},onKeyUp:function onKeyUp(e){13===e.keyCode&&insert(insertValue)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("span",{children:["Found: ",found?"Yes":"No"]}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){setData(getData("inorder"))},children:"Get Data"}),Object(jsx_runtime.jsx)("span",{children:data.map((function(e){return e+" "}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:clear,children:"Clear"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTree(randomValue)},children:"Random"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setTreeType(checkTreeType())},children:"Check Tree Type"}),Object(jsx_runtime.jsx)("span",{children:treeType.map((function(e,index){return e+","+(index!==treeType.length-1?" ":"")}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setDefaultData([].concat(_toConsumableArray(defaultData),[defaultData.length+1]))},children:"Append element to data"})]}),Object(jsx_runtime.jsx)(src.a,{ref:ref,data:defaultData,treeStyles:Object.assign({},args)})]})};AVLTree_stories_SimpleExample.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const { ref, insert, remove, search } = useAVLTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: 'center' }}>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? 'Yes' : 'No'}</p>\n      </div>\n      <AVLTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},AVLTree_stories_SimpleExample.parameters),AVLTree_stories_AllFunctions.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    generateRandomTree,\n    checkTreeType,\n  } = useAVLTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? 'Yes' : 'No'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData('inorder'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? ' ' : ''}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <AVLTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},AVLTree_stories_AllFunctions.parameters)},862:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SimpleExample",(function(){return BinarySearchTree_stories_SimpleExample})),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return BinarySearchTree_stories_AllFunctions}));__webpack_require__(60),__webpack_require__(28),__webpack_require__(125),__webpack_require__(15),__webpack_require__(25),__webpack_require__(26),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);var react=__webpack_require__(0),src=__webpack_require__(34),util=__webpack_require__(38),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"binary-search-tree"},"Binary Search Tree"),Object(esm.b)("p",null,"It organizes numbers in a binary search tree and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},'const Component = () => {\n  const { ref, insert } = useBinarySearchTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <BinarySearchTree ref={ref} data={[2, 1, 3]} />\n    </>\n  )\n}\n')),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.d,mdxType:"Table"}),Object(esm.b)("h2",{id:"usebinarysearchtree"},"useBinarySearchTree"),Object(esm.b)("p",null,"This hook allows you to interact with your tree. Insert, remove, search and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.c,mdxType:"Table"}),Object(esm.b)("h5",{id:"traversalordertype--inorder--postorder--preorder"},Object(esm.b)("inlineCode",{parentName:"h5"},"TraversalOrderType = 'inorder' | 'postorder' | 'preorder'")),Object(esm.b)("h5",{id:"binarytreechecktype--balanced--complete--perfect--full-"},Object(esm.b)("inlineCode",{parentName:"h5"},"BinaryTreeCheckType = 'balanced' | 'complete' | 'perfect' | 'full' ")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function BinarySearchTree_stories_extends(){return BinarySearchTree_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},BinarySearchTree_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/Binary Search Tree",component:src.b,argTypes:Object(util.c)(),parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React, { useState } from \'react\'\\nimport { Meta, Story } from \'@storybook/react\'\\nimport { BinarySearchTree, useBinarySearchTree } from \'../index\'\\nimport { handleStyleArgTypes } from \'../util\'\\nimport BinarySearchTreeDoc from \'./docs/BinarySearchTreeDoc.mdx\'\\n\\nexport default {\\n  title: \'Tree/Binary Search Tree\',\\n  component: BinarySearchTree,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: BinarySearchTreeDoc } },\\n} as Meta\\n\\nexport const SimpleExample: Story = ({ ...args }) => {\\n  const { ref, insert, remove, search } = useBinarySearchTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <BinarySearchTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    balance,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useBinarySearchTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <button onClick={balance}>Balance</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <BinarySearchTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"SimpleExample":{"startLoc":{"col":36,"line":14},"endLoc":{"col":1,"line":54},"startBody":{"col":36,"line":14},"endBody":{"col":1,"line":54}},"AllFunctions":{"startLoc":{"col":35,"line":56},"endLoc":{"col":1,"line":152},"startBody":{"col":35,"line":56},"endBody":{"col":1,"line":152}}};\n    \nimport React, { useState } from \'react\'\nimport { Meta, Story } from \'@storybook/react\'\nimport { BinarySearchTree, useBinarySearchTree } from \'../index\'\nimport { handleStyleArgTypes } from \'../util\'\nimport BinarySearchTreeDoc from \'./docs/BinarySearchTreeDoc.mdx\'\n\nexport default {\n  title: \'Tree/Binary Search Tree\',\n  component: BinarySearchTree,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: BinarySearchTreeDoc } },\n} as Meta\n\nexport const SimpleExample: Story = ({ ...args }) => {\n  const { ref, insert, remove, search } = useBinarySearchTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\n      </div>\n      <BinarySearchTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    balance,\n    generateRandomTree,\n    checkTreeType,\n  } = useBinarySearchTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData(\'inorder\'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <button onClick={balance}>Balance</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <BinarySearchTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\n\nSimpleExample.parameters = { storySource: { source: "({ ...args }) => {\\n  const { ref, insert, remove, search } = useBinarySearchTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <BinarySearchTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...SimpleExample.parameters };\nAllFunctions.parameters = { storySource: { source: "({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    balance,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useBinarySearchTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <button onClick={balance}>Balance</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <BinarySearchTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...AllFunctions.parameters };',locationsMap:{"simple-example":{startLoc:{col:36,line:22},endLoc:{col:1,line:62},startBody:{col:36,line:22},endBody:{col:1,line:62}},"all-functions":{startLoc:{col:35,line:64},endLoc:{col:1,line:160},startBody:{col:35,line:64},endBody:{col:1,line:160}}}},docs:{page:MDXContent}}};var BinarySearchTree_stories_SimpleExample=function SimpleExample(_ref){var args=BinarySearchTree_stories_extends({},_ref),_useBinarySearchTree=Object(src.h)(),ref=_useBinarySearchTree.ref,insert=_useBinarySearchTree.insert,remove=_useBinarySearchTree.remove,search=_useBinarySearchTree.search,_useState2=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState6[0],setSearchValue=_useState6[1],_useState8=_slicedToArray(Object(react.useState)(!1),2),found=_useState8[0],setFound=_useState8[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("p",{children:["Found: ",found?"Yes":"No"]})]}),Object(jsx_runtime.jsx)(src.b,{ref:ref,data:[2,1,3],treeStyles:Object.assign({},args)})]})},BinarySearchTree_stories_AllFunctions=function AllFunctions(_ref2){var args=BinarySearchTree_stories_extends({},_ref2),_useBinarySearchTree2=Object(src.h)(),ref=_useBinarySearchTree2.ref,insert=_useBinarySearchTree2.insert,remove=_useBinarySearchTree2.remove,search=_useBinarySearchTree2.search,getData=_useBinarySearchTree2.getData,clear=_useBinarySearchTree2.clear,balance=_useBinarySearchTree2.balance,generateRandomTree=_useBinarySearchTree2.generateRandomTree,checkTreeType=_useBinarySearchTree2.checkTreeType,_useState10=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState10[0],setInsertValue=_useState10[1],_useState12=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState12[0],setRemoveValue=_useState12[1],_useState14=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState14[0],setSearchValue=_useState14[1],_useState16=_slicedToArray(Object(react.useState)(0),2),randomValue=_useState16[0],setRandomValue=_useState16[1],_useState18=_slicedToArray(Object(react.useState)(!1),2),found=_useState18[0],setFound=_useState18[1],_useState20=_slicedToArray(Object(react.useState)([]),2),data=_useState20[0],setData=_useState20[1],_useState22=_slicedToArray(Object(react.useState)([]),2),treeType=_useState22[0],setTreeType=_useState22[1],_useState24=_slicedToArray(Object(react.useState)([1,2,3]),2),defaultData=_useState24[0],setDefaultData=_useState24[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))},onKeyUp:function onKeyUp(e){13===e.keyCode&&insert(insertValue)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("span",{children:["Found: ",found?"Yes":"No"]}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){setData(getData("inorder"))},children:"Get Data"}),Object(jsx_runtime.jsx)("span",{children:data.map((function(e){return e+" "}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:clear,children:"Clear"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:balance,children:"Balance"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTree(randomValue)},children:"Random"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setTreeType(checkTreeType())},children:"Check Tree Type"}),Object(jsx_runtime.jsx)("span",{children:treeType.map((function(e,index){return e+","+(index!==treeType.length-1?" ":"")}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setDefaultData([].concat(_toConsumableArray(defaultData),[defaultData.length+1]))},children:"Append element to data"})]}),Object(jsx_runtime.jsx)(src.b,{ref:ref,data:defaultData,treeStyles:Object.assign({},args)})]})};BinarySearchTree_stories_SimpleExample.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const { ref, insert, remove, search } = useBinarySearchTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: 'center' }}>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? 'Yes' : 'No'}</p>\n      </div>\n      <BinarySearchTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},BinarySearchTree_stories_SimpleExample.parameters),BinarySearchTree_stories_AllFunctions.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    balance,\n    generateRandomTree,\n    checkTreeType,\n  } = useBinarySearchTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? 'Yes' : 'No'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData('inorder'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <button onClick={balance}>Balance</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? ' ' : ''}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <BinarySearchTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},BinarySearchTree_stories_AllFunctions.parameters)},863:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return MaxHeap_stories_AllFunctions}));__webpack_require__(125),__webpack_require__(25),__webpack_require__(15),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22),__webpack_require__(0);var src=__webpack_require__(34),util=__webpack_require__(38),hooks=__webpack_require__(871),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"max-heap"},"Max Heap"),Object(esm.b)("p",null,"It organizes numbers in a max heap and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},'const Component = () => {\n  const { ref, insert } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <MaxHeap ref={ref} data={[2, 1, 3]} />\n    </>\n  )\n}\n')),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.h,mdxType:"Table"}),Object(esm.b)("h2",{id:"useheap"},"useHeap"),Object(esm.b)("p",null,"This hook allows you to interact with your heap. Insert, remove and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.g,mdxType:"Table"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function MaxHeap_stories_extends(){return MaxHeap_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},MaxHeap_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/Max Heap",component:src.c,argTypes:Object(util.c)(),parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \'react\'\\nimport { Meta, Story } from \'@storybook/react\'\\nimport { MaxHeap, useHeap } from \'..\'\\nimport { handleStyleArgTypes } from \'../util\'\\nimport { useState } from \'@storybook/addons\'\\nimport MaxHeapDoc from \'./docs/MaxHeapDoc.mdx\'\\n\\nexport default {\\n  title: \'Tree/Max Heap\',\\n  component: MaxHeap,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: MaxHeapDoc } },\\n} as Meta\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    generateRandomTree,\\n    clear,\\n    extractTop,\\n    getData,\\n  } = useHeap()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\\n  const [data, setData] = useState<number[]>([])\\n  const [top, setTop] = useState<number>(null)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\\n          Generate random heap\\n        </button>\\n        <br />\\n        <button onClick={() => clear()}>Clear</button>\\n        <br />\\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\\n        <p>{top}</p>\\n        <br />\\n        <button onClick={() => setData(getData())}>Get data</button>\\n        <p>\\n          {data.map((num) => (\\n            <span key={num}>{num},</span>\\n          ))}\\n        </p>\\n      </div>\\n      <MaxHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"AllFunctions":{"startLoc":{"col":35,"line":15},"endLoc":{"col":1,"line":76},"startBody":{"col":35,"line":15},"endBody":{"col":1,"line":76}}};\n    \nimport React from \'react\'\nimport { Meta, Story } from \'@storybook/react\'\nimport { MaxHeap, useHeap } from \'..\'\nimport { handleStyleArgTypes } from \'../util\'\nimport { useState } from \'@storybook/addons\'\nimport MaxHeapDoc from \'./docs/MaxHeapDoc.mdx\'\n\nexport default {\n  title: \'Tree/Max Heap\',\n  component: MaxHeap,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: MaxHeapDoc } },\n} as Meta\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    generateRandomTree,\n    clear,\n    extractTop,\n    getData,\n  } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\n  const [data, setData] = useState<number[]>([])\n  const [top, setTop] = useState<number>(null)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\n          Generate random heap\n        </button>\n        <br />\n        <button onClick={() => clear()}>Clear</button>\n        <br />\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\n        <p>{top}</p>\n        <br />\n        <button onClick={() => setData(getData())}>Get data</button>\n        <p>\n          {data.map((num) => (\n            <span key={num}>{num},</span>\n          ))}\n        </p>\n      </div>\n      <MaxHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\n\nAllFunctions.parameters = { storySource: { source: "({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    generateRandomTree,\\n    clear,\\n    extractTop,\\n    getData,\\n  } = useHeap()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\\n  const [data, setData] = useState<number[]>([])\\n  const [top, setTop] = useState<number>(null)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\\n          Generate random heap\\n        </button>\\n        <br />\\n        <button onClick={() => clear()}>Clear</button>\\n        <br />\\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\\n        <p>{top}</p>\\n        <br />\\n        <button onClick={() => setData(getData())}>Get data</button>\\n        <p>\\n          {data.map((num) => (\\n            <span key={num}>{num},</span>\\n          ))}\\n        </p>\\n      </div>\\n      <MaxHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...AllFunctions.parameters };',locationsMap:{"all-functions":{startLoc:{col:35,line:23},endLoc:{col:1,line:84},startBody:{col:35,line:23},endBody:{col:1,line:84}}}},docs:{page:MDXContent}}};var MaxHeap_stories_AllFunctions=function AllFunctions(_ref){var args=MaxHeap_stories_extends({},_ref),_useHeap=Object(src.i)(),ref=_useHeap.ref,insert=_useHeap.insert,remove=_useHeap.remove,generateRandomTree=_useHeap.generateRandomTree,clear=_useHeap.clear,extractTop=_useHeap.extractTop,getData=_useHeap.getData,_useState2=_slicedToArray(Object(hooks.e)(0),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(hooks.e)(0),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(hooks.e)(0),2),randomNodeCount=_useState6[0],setRandomNodeCount=_useState6[1],_useState8=_slicedToArray(Object(hooks.e)([]),2),data=_useState8[0],setData=_useState8[1],_useState10=_slicedToArray(Object(hooks.e)(null),2),top=_useState10[0],setTop=_useState10[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomNodeCount(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTree(randomNodeCount)},children:"Generate random heap"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return clear()},children:"Clear"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setTop(extractTop())},children:"Extract top"}),Object(jsx_runtime.jsx)("p",{children:top}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setData(getData())},children:"Get data"}),Object(jsx_runtime.jsx)("p",{children:data.map((function(num){return Object(jsx_runtime.jsxs)("span",{children:[num,","]},num)}))})]}),Object(jsx_runtime.jsx)(src.c,{ref:ref,data:[1,2,3],treeStyles:Object.assign({},args)})]})};MaxHeap_stories_AllFunctions.parameters=Object.assign({storySource:{source:'({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    generateRandomTree,\n    clear,\n    extractTop,\n    getData,\n  } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\n  const [data, setData] = useState<number[]>([])\n  const [top, setTop] = useState<number>(null)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\n          Generate random heap\n        </button>\n        <br />\n        <button onClick={() => clear()}>Clear</button>\n        <br />\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\n        <p>{top}</p>\n        <br />\n        <button onClick={() => setData(getData())}>Get data</button>\n        <p>\n          {data.map((num) => (\n            <span key={num}>{num},</span>\n          ))}\n        </p>\n      </div>\n      <MaxHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n}'}},MaxHeap_stories_AllFunctions.parameters)},864:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return MinHeap_stories_AllFunctions}));__webpack_require__(125),__webpack_require__(25),__webpack_require__(15),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22),__webpack_require__(0);var src=__webpack_require__(34),util=__webpack_require__(38),hooks=__webpack_require__(871),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"min-heap"},"Min Heap"),Object(esm.b)("p",null,"It organizes numbers in a min heap and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},'const Component = () => {\n  const { ref, insert } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <MinHeap ref={ref} data={[2, 1, 3]} />\n    </>\n  )\n}\n')),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.h,mdxType:"Table"}),Object(esm.b)("h2",{id:"useheap"},"useHeap"),Object(esm.b)("p",null,"This hook allows you to interact with your heap. Insert, remove and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.g,mdxType:"Table"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function MinHeap_stories_extends(){return MinHeap_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},MinHeap_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/Min Heap",component:src.d,argTypes:Object(util.c)(),parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \'react\'\\nimport { Meta, Story } from \'@storybook/react\'\\nimport { MinHeap, useHeap } from \'..\'\\nimport { handleStyleArgTypes } from \'../util\'\\nimport { useState } from \'@storybook/addons\'\\nimport MinHeapDoc from \'./docs/MinHeapDoc.mdx\'\\n\\nexport default {\\n  title: \'Tree/Min Heap\',\\n  component: MinHeap,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: MinHeapDoc } },\\n} as Meta\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    generateRandomTree,\\n    clear,\\n    extractTop,\\n    getData,\\n  } = useHeap()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\\n  const [data, setData] = useState<number[]>([])\\n  const [top, setTop] = useState<number>(null)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\\n          Generate random heap\\n        </button>\\n        <br />\\n        <button onClick={() => clear()}>Clear</button>\\n        <br />\\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\\n        <p>{top}</p>\\n        <br />\\n        <button onClick={() => setData(getData())}>Get data</button>\\n        <p>\\n          {data.map((num) => (\\n            <span key={num}>{num},</span>\\n          ))}\\n        </p>\\n      </div>\\n      <MinHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"AllFunctions":{"startLoc":{"col":35,"line":15},"endLoc":{"col":1,"line":76},"startBody":{"col":35,"line":15},"endBody":{"col":1,"line":76}}};\n    \nimport React from \'react\'\nimport { Meta, Story } from \'@storybook/react\'\nimport { MinHeap, useHeap } from \'..\'\nimport { handleStyleArgTypes } from \'../util\'\nimport { useState } from \'@storybook/addons\'\nimport MinHeapDoc from \'./docs/MinHeapDoc.mdx\'\n\nexport default {\n  title: \'Tree/Min Heap\',\n  component: MinHeap,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: MinHeapDoc } },\n} as Meta\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    generateRandomTree,\n    clear,\n    extractTop,\n    getData,\n  } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\n  const [data, setData] = useState<number[]>([])\n  const [top, setTop] = useState<number>(null)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\n          Generate random heap\n        </button>\n        <br />\n        <button onClick={() => clear()}>Clear</button>\n        <br />\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\n        <p>{top}</p>\n        <br />\n        <button onClick={() => setData(getData())}>Get data</button>\n        <p>\n          {data.map((num) => (\n            <span key={num}>{num},</span>\n          ))}\n        </p>\n      </div>\n      <MinHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\n\nAllFunctions.parameters = { storySource: { source: "({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    generateRandomTree,\\n    clear,\\n    extractTop,\\n    getData,\\n  } = useHeap()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\\n  const [data, setData] = useState<number[]>([])\\n  const [top, setTop] = useState<number>(null)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\\n          Generate random heap\\n        </button>\\n        <br />\\n        <button onClick={() => clear()}>Clear</button>\\n        <br />\\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\\n        <p>{top}</p>\\n        <br />\\n        <button onClick={() => setData(getData())}>Get data</button>\\n        <p>\\n          {data.map((num) => (\\n            <span key={num}>{num},</span>\\n          ))}\\n        </p>\\n      </div>\\n      <MinHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...AllFunctions.parameters };',locationsMap:{"all-functions":{startLoc:{col:35,line:23},endLoc:{col:1,line:84},startBody:{col:35,line:23},endBody:{col:1,line:84}}}},docs:{page:MDXContent}}};var MinHeap_stories_AllFunctions=function AllFunctions(_ref){var args=MinHeap_stories_extends({},_ref),_useHeap=Object(src.i)(),ref=_useHeap.ref,insert=_useHeap.insert,remove=_useHeap.remove,generateRandomTree=_useHeap.generateRandomTree,clear=_useHeap.clear,extractTop=_useHeap.extractTop,getData=_useHeap.getData,_useState2=_slicedToArray(Object(hooks.e)(0),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(hooks.e)(0),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(hooks.e)(0),2),randomNodeCount=_useState6[0],setRandomNodeCount=_useState6[1],_useState8=_slicedToArray(Object(hooks.e)([]),2),data=_useState8[0],setData=_useState8[1],_useState10=_slicedToArray(Object(hooks.e)(null),2),top=_useState10[0],setTop=_useState10[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomNodeCount(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTree(randomNodeCount)},children:"Generate random heap"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return clear()},children:"Clear"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setTop(extractTop())},children:"Extract top"}),Object(jsx_runtime.jsx)("p",{children:top}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setData(getData())},children:"Get data"}),Object(jsx_runtime.jsx)("p",{children:data.map((function(num){return Object(jsx_runtime.jsxs)("span",{children:[num,","]},num)}))})]}),Object(jsx_runtime.jsx)(src.d,{ref:ref,data:[1,2,3],treeStyles:Object.assign({},args)})]})};MinHeap_stories_AllFunctions.parameters=Object.assign({storySource:{source:'({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    generateRandomTree,\n    clear,\n    extractTop,\n    getData,\n  } = useHeap()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [randomNodeCount, setRandomNodeCount] = useState(0)\n  const [data, setData] = useState<number[]>([])\n  const [top, setTop] = useState<number>(null)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomNodeCount(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomNodeCount)}>\n          Generate random heap\n        </button>\n        <br />\n        <button onClick={() => clear()}>Clear</button>\n        <br />\n        <button onClick={() => setTop(extractTop())}>Extract top</button>\n        <p>{top}</p>\n        <br />\n        <button onClick={() => setData(getData())}>Get data</button>\n        <p>\n          {data.map((num) => (\n            <span key={num}>{num},</span>\n          ))}\n        </p>\n      </div>\n      <MinHeap ref={ref} data={[1, 2, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n}'}},MinHeap_stories_AllFunctions.parameters)},865:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"SimpleExample",(function(){return RedBlackTree_stories_SimpleExample})),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return RedBlackTree_stories_AllFunctions}));__webpack_require__(60),__webpack_require__(28),__webpack_require__(125),__webpack_require__(15),__webpack_require__(25),__webpack_require__(26),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);var react=__webpack_require__(0),src=__webpack_require__(34),util=__webpack_require__(38),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"red-black-tree"},"Red Black Tree"),Object(esm.b)("p",null,"It organizes numbers in a self balancing binary search tree and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},'const Component = () => {\n  const { ref, insert } = useRedBlackTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <RedBlackTree ref={ref} data={[2, 1, 3]} />\n    </>\n  )\n}\n')),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.i,mdxType:"Table"}),Object(esm.b)("h2",{id:"useredblacktree"},"useRedBlackTree"),Object(esm.b)("p",null,"This hook allows you to interact with your tree. Insert, remove, search and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.a,mdxType:"Table"}),Object(esm.b)("h5",{id:"traversalordertype--inorder--postorder--preorder"},Object(esm.b)("inlineCode",{parentName:"h5"},"TraversalOrderType = 'inorder' | 'postorder' | 'preorder'")),Object(esm.b)("h5",{id:"binarytreechecktype--balanced--complete--perfect--full-"},Object(esm.b)("inlineCode",{parentName:"h5"},"BinaryTreeCheckType = 'balanced' | 'complete' | 'perfect' | 'full' ")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function RedBlackTree_stories_extends(){return RedBlackTree_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},RedBlackTree_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/Red Black Tree",component:src.e,argTypes:Object(util.c)(),parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import { Meta, Story } from \'@storybook/react\'\\nimport React, { useState } from \'react\'\\nimport { RedBlackTree, useRedBlackTree } from \'..\'\\nimport { handleStyleArgTypes } from \'../util\'\\nimport RedBlackTreeDoc from \'./docs/RedBlackTreeDoc.mdx\'\\n\\nexport default {\\n  title: \'Tree/Red Black Tree\',\\n  component: RedBlackTree,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: RedBlackTreeDoc } },\\n} as Meta\\n\\nexport const SimpleExample: Story = ({ ...args }) => {\\n  const { ref, insert, remove, search } = useRedBlackTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <RedBlackTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useRedBlackTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <RedBlackTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"SimpleExample":{"startLoc":{"col":36,"line":14},"endLoc":{"col":1,"line":54},"startBody":{"col":36,"line":14},"endBody":{"col":1,"line":54}},"AllFunctions":{"startLoc":{"col":35,"line":56},"endLoc":{"col":1,"line":149},"startBody":{"col":35,"line":56},"endBody":{"col":1,"line":149}}};\n    \nimport { Meta, Story } from \'@storybook/react\'\nimport React, { useState } from \'react\'\nimport { RedBlackTree, useRedBlackTree } from \'..\'\nimport { handleStyleArgTypes } from \'../util\'\nimport RedBlackTreeDoc from \'./docs/RedBlackTreeDoc.mdx\'\n\nexport default {\n  title: \'Tree/Red Black Tree\',\n  component: RedBlackTree,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: RedBlackTreeDoc } },\n} as Meta\n\nexport const SimpleExample: Story = ({ ...args }) => {\n  const { ref, insert, remove, search } = useRedBlackTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: \'center\' }}>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\n      </div>\n      <RedBlackTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    generateRandomTree,\n    checkTreeType,\n  } = useRedBlackTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type="number"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData(\'inorder\'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <input\n          type="number"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <RedBlackTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n};\n\n\nSimpleExample.parameters = { storySource: { source: "({ ...args }) => {\\n  const { ref, insert, remove, search } = useRedBlackTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n\\n  return (\\n    <>\\n      <div style={{ textAlign: \'center\' }}>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <p>Found: {found ? \'Yes\' : \'No\'}</p>\\n      </div>\\n      <RedBlackTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...SimpleExample.parameters };\nAllFunctions.parameters = { storySource: { source: "({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    getData,\\n    clear,\\n    generateRandomTree,\\n    checkTreeType,\\n  } = useRedBlackTree()\\n\\n  const [insertValue, setInsertValue] = useState(0)\\n  const [removeValue, setRemoveValue] = useState(0)\\n  const [searchValue, setSearchValue] = useState(0)\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [found, setFound] = useState(false)\\n  const [data, setData] = useState([])\\n  const [treeType, setTreeType] = useState([])\\n\\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setInsertValue(parseInt(elem.currentTarget.value))\\n          }\\n          onKeyUp={(e) => {\\n            if (e.keyCode === 13) insert(insertValue)\\n          }}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRemoveValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) => {\\n            setFound(false)\\n            setSearchValue(parseInt(elem.currentTarget.value))\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\\n        <span>Found: {found ? \'Yes\' : \'No\'}</span>\\n        <br />\\n        <button\\n          onClick={() => {\\n            setData(getData(\'inorder\'))\\n          }}\\n        >\\n          Get Data\\n        </button>\\n        <span>{data.map((e) => `${e} `)}</span>\\n        <br />\\n        <button onClick={clear}>Clear</button>\\n        <br />\\n        <input\\n          type=\\"number\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\\n        <br />\\n        <button onClick={() => setTreeType(checkTreeType())}>\\n          Check Tree Type\\n        </button>\\n        <span>\\n          {treeType.map(\\n            (e, index) => `${e},${index !== treeType.length - 1 ? \' \' : \'\'}`,\\n          )}\\n        </span>\\n        <br />\\n        <button\\n          onClick={() =>\\n            setDefaultData([...defaultData, defaultData.length + 1])\\n          }\\n        >\\n          Append element to data\\n        </button>\\n      </div>\\n      <RedBlackTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\\n    </>\\n  )\\n}" }, ...AllFunctions.parameters };',locationsMap:{"simple-example":{startLoc:{col:36,line:22},endLoc:{col:1,line:62},startBody:{col:36,line:22},endBody:{col:1,line:62}},"all-functions":{startLoc:{col:35,line:64},endLoc:{col:1,line:157},startBody:{col:35,line:64},endBody:{col:1,line:157}}}},docs:{page:MDXContent}}};var RedBlackTree_stories_SimpleExample=function SimpleExample(_ref){var args=RedBlackTree_stories_extends({},_ref),_useRedBlackTree=Object(src.j)(),ref=_useRedBlackTree.ref,insert=_useRedBlackTree.insert,remove=_useRedBlackTree.remove,search=_useRedBlackTree.search,_useState2=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState6[0],setSearchValue=_useState6[1],_useState8=_slicedToArray(Object(react.useState)(!1),2),found=_useState8[0],setFound=_useState8[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{textAlign:"center"},children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("p",{children:["Found: ",found?"Yes":"No"]})]}),Object(jsx_runtime.jsx)(src.e,{ref:ref,data:[2,1,3],treeStyles:Object.assign({},args)})]})},RedBlackTree_stories_AllFunctions=function AllFunctions(_ref2){var args=RedBlackTree_stories_extends({},_ref2),_useRedBlackTree2=Object(src.j)(),ref=_useRedBlackTree2.ref,insert=_useRedBlackTree2.insert,remove=_useRedBlackTree2.remove,search=_useRedBlackTree2.search,getData=_useRedBlackTree2.getData,clear=_useRedBlackTree2.clear,generateRandomTree=_useRedBlackTree2.generateRandomTree,checkTreeType=_useRedBlackTree2.checkTreeType,_useState10=_slicedToArray(Object(react.useState)(0),2),insertValue=_useState10[0],setInsertValue=_useState10[1],_useState12=_slicedToArray(Object(react.useState)(0),2),removeValue=_useState12[0],setRemoveValue=_useState12[1],_useState14=_slicedToArray(Object(react.useState)(0),2),searchValue=_useState14[0],setSearchValue=_useState14[1],_useState16=_slicedToArray(Object(react.useState)(0),2),randomValue=_useState16[0],setRandomValue=_useState16[1],_useState18=_slicedToArray(Object(react.useState)(!1),2),found=_useState18[0],setFound=_useState18[1],_useState20=_slicedToArray(Object(react.useState)([]),2),data=_useState20[0],setData=_useState20[1],_useState22=_slicedToArray(Object(react.useState)([]),2),treeType=_useState22[0],setTreeType=_useState22[1],_useState24=_slicedToArray(Object(react.useState)([1,2,3]),2),defaultData=_useState24[0],setDefaultData=_useState24[1];return Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setInsertValue(parseInt(elem.currentTarget.value))},onKeyUp:function onKeyUp(e){13===e.keyCode&&insert(insertValue)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRemoveValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){setFound(!1),setSearchValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue))},children:"Search"}),Object(jsx_runtime.jsxs)("span",{children:["Found: ",found?"Yes":"No"]}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){setData(getData("inorder"))},children:"Get Data"}),Object(jsx_runtime.jsx)("span",{children:data.map((function(e){return e+" "}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:clear,children:"Clear"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTree(randomValue)},children:"Random"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setTreeType(checkTreeType())},children:"Check Tree Type"}),Object(jsx_runtime.jsx)("span",{children:treeType.map((function(e,index){return e+","+(index!==treeType.length-1?" ":"")}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setDefaultData([].concat(_toConsumableArray(defaultData),[defaultData.length+1]))},children:"Append element to data"})]}),Object(jsx_runtime.jsx)(src.e,{ref:ref,data:defaultData,treeStyles:Object.assign({},args)})]})};RedBlackTree_stories_SimpleExample.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const { ref, insert, remove, search } = useRedBlackTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [found, setFound] = useState(false)\n\n  return (\n    <>\n      <div style={{ textAlign: 'center' }}>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <p>Found: {found ? 'Yes' : 'No'}</p>\n      </div>\n      <RedBlackTree ref={ref} data={[2, 1, 3]} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},RedBlackTree_stories_SimpleExample.parameters),RedBlackTree_stories_AllFunctions.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    getData,\n    clear,\n    generateRandomTree,\n    checkTreeType,\n  } = useRedBlackTree()\n\n  const [insertValue, setInsertValue] = useState(0)\n  const [removeValue, setRemoveValue] = useState(0)\n  const [searchValue, setSearchValue] = useState(0)\n  const [randomValue, setRandomValue] = useState(0)\n  const [found, setFound] = useState(false)\n  const [data, setData] = useState([])\n  const [treeType, setTreeType] = useState([])\n\n  const [defaultData, setDefaultData] = useState([1, 2, 3])\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setInsertValue(parseInt(elem.currentTarget.value))\n          }\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) insert(insertValue)\n          }}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRemoveValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) => {\n            setFound(false)\n            setSearchValue(parseInt(elem.currentTarget.value))\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue))}>Search</button>\n        <span>Found: {found ? 'Yes' : 'No'}</span>\n        <br />\n        <button\n          onClick={() => {\n            setData(getData('inorder'))\n          }}\n        >\n          Get Data\n        </button>\n        <span>{data.map((e) => `${e} `)}</span>\n        <br />\n        <button onClick={clear}>Clear</button>\n        <br />\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTree(randomValue)}>Random</button>\n        <br />\n        <button onClick={() => setTreeType(checkTreeType())}>\n          Check Tree Type\n        </button>\n        <span>\n          {treeType.map(\n            (e, index) => `${e},${index !== treeType.length - 1 ? ' ' : ''}`,\n          )}\n        </span>\n        <br />\n        <button\n          onClick={() =>\n            setDefaultData([...defaultData, defaultData.length + 1])\n          }\n        >\n          Append element to data\n        </button>\n      </div>\n      <RedBlackTree ref={ref} data={defaultData} treeStyles={{ ...args }} />\n    </>\n  )\n}"}},RedBlackTree_stories_AllFunctions.parameters)},866:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"AllFunctions",(function(){return Trie_stories_AllFunctions}));__webpack_require__(60),__webpack_require__(28),__webpack_require__(125),__webpack_require__(25),__webpack_require__(15),__webpack_require__(73),__webpack_require__(5),__webpack_require__(10),__webpack_require__(9),__webpack_require__(16),__webpack_require__(13),__webpack_require__(11),__webpack_require__(12),__webpack_require__(14),__webpack_require__(8),__webpack_require__(22);var react=__webpack_require__(0),src=__webpack_require__(34),util=__webpack_require__(38),esm=(__webpack_require__(20),__webpack_require__(114),__webpack_require__(4)),Table=__webpack_require__(51),constants=__webpack_require__(24),_excluded=["components"];function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return Object(esm.b)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.b)("h1",{id:"trie"},"Trie"),Object(esm.b)("p",null,"It organizes words in a trie and exposes various styling options."),Object(esm.b)("h2",{id:"example"},"Example"),Object(esm.b)("pre",null,Object(esm.b)("code",{parentName:"pre",className:"language-js"},"const Component = () => {\n  const { ref, insert } = useTrie()\n\n  const [insertValue, setInsertValue] = useState('')\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          onChange={(elem) => setInsertValue(elem.currentTarget.value)}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n      </div>\n      <Trie ref={ref} data={['cook', 'cold', 'cap', 'cooker', 'cool']} />\n    </>\n  )\n}\n")),Object(esm.b)("h2",{id:"props"},"Props"),Object(esm.b)(Table.a,{data:constants.l,mdxType:"Table"}),Object(esm.b)("h2",{id:"usetrie"},"useTrie"),Object(esm.b)("p",null,"This hook allows you to interact with your trie. Insert, remove, search and so much more!"),Object(esm.b)("p",null,"It returns an object with the following properties."),Object(esm.b)(Table.a,{data:constants.k,mdxType:"Table"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Trie_stories_extends(){return Trie_stories_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Trie_stories_extends.apply(this,arguments)}__webpack_exports__.default={title:"Tree/Trie",component:src.f,argTypes:Object(util.c)(),parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useEffect, useState } from 'react'\\nimport { Meta, Story } from '@storybook/react'\\nimport { Trie, useTrie } from '../index'\\nimport { handleStyleArgTypes } from '../util'\\nimport TrieDoc from './docs/TrieDoc.mdx'\\n\\nexport default {\\n  title: 'Tree/Trie',\\n  component: Trie,\\n  argTypes: handleStyleArgTypes(),\\n  parameters: { docs: { page: TrieDoc } },\\n} as Meta\\n\\nexport const AllFunctions: Story = ({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    searchPrefix,\\n    getAllWords,\\n    generateRandomTrie,\\n    removeHighlight,\\n  } = useTrie()\\n\\n  const [insertValue, setInsertValue] = useState('')\\n  const [removeValue, setRemoveValue] = useState('')\\n  const [searchValue, setSearchValue] = useState('')\\n  const [searchPrefixValue, setSearchPrefixValue] = useState('')\\n  const [found, setFound] = useState<'Yes' | 'No' | 'Not searched'>(\\n    'Not searched',\\n  )\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [data, setData] = useState([])\\n\\n  useEffect(() => {\\n    searchPrefix && searchPrefix(searchPrefixValue)\\n  }, [searchPrefixValue, searchPrefix])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\\"number\\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTrie(randomValue)}>\\n          Generate random tree\\n        </button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => setInsertValue(elem.currentTarget.value)}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => setRemoveValue(elem.currentTarget.value)}\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => {\\n            setSearchPrefixValue(elem.currentTarget.value)\\n          }}\\n          placeholder=\\\"Search prefix\\\"\\n        />\\n        <br />\\n        <button onClick={() => setData(getAllWords())}>Get all words</button>\\n        <div>\\n          {data.map((word) => (\\n            <p key={word}>{word}</p>\\n          ))}\\n        </div>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => {\\n            setFound('Not searched')\\n            setSearchValue(elem.currentTarget.value)\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue) ? 'Yes' : 'No')}>\\n          Search\\n        </button>\\n        <p>Found: {found}</p>\\n        <br />\\n        <button onClick={() => removeHighlight()}>Remove highlight</button>\\n      </div>\\n      <Trie\\n        ref={ref}\\n        data={['cook', 'cold', 'cap', 'cooker', 'cool']}\\n        treeStyles={{ ...args }}\\n      />\\n    </>\\n  )\\n}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"AllFunctions\":{\"startLoc\":{\"col\":35,\"line\":14},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":35,\"line\":14},\"endBody\":{\"col\":1,\"line\":101}}};\n    \nimport React, { useEffect, useState } from 'react'\nimport { Meta, Story } from '@storybook/react'\nimport { Trie, useTrie } from '../index'\nimport { handleStyleArgTypes } from '../util'\nimport TrieDoc from './docs/TrieDoc.mdx'\n\nexport default {\n  title: 'Tree/Trie',\n  component: Trie,\n  argTypes: handleStyleArgTypes(),\n  parameters: { docs: { page: TrieDoc } },\n} as Meta\n\nexport const AllFunctions: Story = ({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    searchPrefix,\n    getAllWords,\n    generateRandomTrie,\n    removeHighlight,\n  } = useTrie()\n\n  const [insertValue, setInsertValue] = useState('')\n  const [removeValue, setRemoveValue] = useState('')\n  const [searchValue, setSearchValue] = useState('')\n  const [searchPrefixValue, setSearchPrefixValue] = useState('')\n  const [found, setFound] = useState<'Yes' | 'No' | 'Not searched'>(\n    'Not searched',\n  )\n  const [randomValue, setRandomValue] = useState(0)\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    searchPrefix && searchPrefix(searchPrefixValue)\n  }, [searchPrefixValue, searchPrefix])\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTrie(randomValue)}>\n          Generate random tree\n        </button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => setInsertValue(elem.currentTarget.value)}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => setRemoveValue(elem.currentTarget.value)}\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => {\n            setSearchPrefixValue(elem.currentTarget.value)\n          }}\n          placeholder=\"Search prefix\"\n        />\n        <br />\n        <button onClick={() => setData(getAllWords())}>Get all words</button>\n        <div>\n          {data.map((word) => (\n            <p key={word}>{word}</p>\n          ))}\n        </div>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => {\n            setFound('Not searched')\n            setSearchValue(elem.currentTarget.value)\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue) ? 'Yes' : 'No')}>\n          Search\n        </button>\n        <p>Found: {found}</p>\n        <br />\n        <button onClick={() => removeHighlight()}>Remove highlight</button>\n      </div>\n      <Trie\n        ref={ref}\n        data={['cook', 'cold', 'cap', 'cooker', 'cool']}\n        treeStyles={{ ...args }}\n      />\n    </>\n  )\n};\n\n\nAllFunctions.parameters = { storySource: { source: \"({ ...args }) => {\\n  const {\\n    ref,\\n    insert,\\n    remove,\\n    search,\\n    searchPrefix,\\n    getAllWords,\\n    generateRandomTrie,\\n    removeHighlight,\\n  } = useTrie()\\n\\n  const [insertValue, setInsertValue] = useState('')\\n  const [removeValue, setRemoveValue] = useState('')\\n  const [searchValue, setSearchValue] = useState('')\\n  const [searchPrefixValue, setSearchPrefixValue] = useState('')\\n  const [found, setFound] = useState<'Yes' | 'No' | 'Not searched'>(\\n    'Not searched',\\n  )\\n  const [randomValue, setRandomValue] = useState(0)\\n  const [data, setData] = useState([])\\n\\n  useEffect(() => {\\n    searchPrefix && searchPrefix(searchPrefixValue)\\n  }, [searchPrefixValue, searchPrefix])\\n\\n  return (\\n    <>\\n      <div>\\n        <input\\n          type=\\\"number\\\"\\n          onChange={(elem) =>\\n            setRandomValue(parseInt(elem.currentTarget.value))\\n          }\\n        />\\n        <button onClick={() => generateRandomTrie(randomValue)}>\\n          Generate random tree\\n        </button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => setInsertValue(elem.currentTarget.value)}\\n        />\\n        <button onClick={() => insert(insertValue)}>Insert</button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => setRemoveValue(elem.currentTarget.value)}\\n        />\\n        <button onClick={() => remove(removeValue)}>Remove</button>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => {\\n            setSearchPrefixValue(elem.currentTarget.value)\\n          }}\\n          placeholder=\\\"Search prefix\\\"\\n        />\\n        <br />\\n        <button onClick={() => setData(getAllWords())}>Get all words</button>\\n        <div>\\n          {data.map((word) => (\\n            <p key={word}>{word}</p>\\n          ))}\\n        </div>\\n        <br />\\n        <input\\n          type=\\\"text\\\"\\n          onChange={(elem) => {\\n            setFound('Not searched')\\n            setSearchValue(elem.currentTarget.value)\\n          }}\\n        />\\n        <button onClick={() => setFound(search(searchValue) ? 'Yes' : 'No')}>\\n          Search\\n        </button>\\n        <p>Found: {found}</p>\\n        <br />\\n        <button onClick={() => removeHighlight()}>Remove highlight</button>\\n      </div>\\n      <Trie\\n        ref={ref}\\n        data={['cook', 'cold', 'cap', 'cooker', 'cool']}\\n        treeStyles={{ ...args }}\\n      />\\n    </>\\n  )\\n}\" }, ...AllFunctions.parameters };",locationsMap:{"all-functions":{startLoc:{col:35,line:22},endLoc:{col:1,line:109},startBody:{col:35,line:22},endBody:{col:1,line:109}}}},docs:{page:MDXContent}}};var Trie_stories_AllFunctions=function AllFunctions(_ref){var args=Trie_stories_extends({},_ref),_useTrie=Object(src.k)(),ref=_useTrie.ref,insert=_useTrie.insert,remove=_useTrie.remove,search=_useTrie.search,searchPrefix=_useTrie.searchPrefix,getAllWords=_useTrie.getAllWords,generateRandomTrie=_useTrie.generateRandomTrie,removeHighlight=_useTrie.removeHighlight,_useState2=_slicedToArray(Object(react.useState)(""),2),insertValue=_useState2[0],setInsertValue=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(""),2),removeValue=_useState4[0],setRemoveValue=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(""),2),searchValue=_useState6[0],setSearchValue=_useState6[1],_useState8=_slicedToArray(Object(react.useState)(""),2),searchPrefixValue=_useState8[0],setSearchPrefixValue=_useState8[1],_useState10=_slicedToArray(Object(react.useState)("Not searched"),2),found=_useState10[0],setFound=_useState10[1],_useState12=_slicedToArray(Object(react.useState)(0),2),randomValue=_useState12[0],setRandomValue=_useState12[1],_useState14=_slicedToArray(Object(react.useState)([]),2),data=_useState14[0],setData=_useState14[1];return Object(react.useEffect)((function(){searchPrefix&&searchPrefix(searchPrefixValue)}),[searchPrefixValue,searchPrefix]),Object(jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsx)("input",{type:"number",onChange:function onChange(elem){return setRandomValue(parseInt(elem.currentTarget.value))}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return generateRandomTrie(randomValue)},children:"Generate random tree"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"text",onChange:function onChange(elem){return setInsertValue(elem.currentTarget.value)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return insert(insertValue)},children:"Insert"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"text",onChange:function onChange(elem){return setRemoveValue(elem.currentTarget.value)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return remove(removeValue)},children:"Remove"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"text",onChange:function onChange(elem){setSearchPrefixValue(elem.currentTarget.value)},placeholder:"Search prefix"}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setData(getAllWords())},children:"Get all words"}),Object(jsx_runtime.jsx)("div",{children:data.map((function(word){return Object(jsx_runtime.jsx)("p",{children:word},word)}))}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("input",{type:"text",onChange:function onChange(elem){setFound("Not searched"),setSearchValue(elem.currentTarget.value)}}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return setFound(search(searchValue)?"Yes":"No")},children:"Search"}),Object(jsx_runtime.jsxs)("p",{children:["Found: ",found]}),Object(jsx_runtime.jsx)("br",{}),Object(jsx_runtime.jsx)("button",{onClick:function onClick(){return removeHighlight()},children:"Remove highlight"})]}),Object(jsx_runtime.jsx)(src.f,{ref:ref,data:["cook","cold","cap","cooker","cool"],treeStyles:Object.assign({},args)})]})};Trie_stories_AllFunctions.parameters=Object.assign({storySource:{source:"({ ...args }) => {\n  const {\n    ref,\n    insert,\n    remove,\n    search,\n    searchPrefix,\n    getAllWords,\n    generateRandomTrie,\n    removeHighlight,\n  } = useTrie()\n\n  const [insertValue, setInsertValue] = useState('')\n  const [removeValue, setRemoveValue] = useState('')\n  const [searchValue, setSearchValue] = useState('')\n  const [searchPrefixValue, setSearchPrefixValue] = useState('')\n  const [found, setFound] = useState<'Yes' | 'No' | 'Not searched'>(\n    'Not searched',\n  )\n  const [randomValue, setRandomValue] = useState(0)\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    searchPrefix && searchPrefix(searchPrefixValue)\n  }, [searchPrefixValue, searchPrefix])\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"number\"\n          onChange={(elem) =>\n            setRandomValue(parseInt(elem.currentTarget.value))\n          }\n        />\n        <button onClick={() => generateRandomTrie(randomValue)}>\n          Generate random tree\n        </button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => setInsertValue(elem.currentTarget.value)}\n        />\n        <button onClick={() => insert(insertValue)}>Insert</button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => setRemoveValue(elem.currentTarget.value)}\n        />\n        <button onClick={() => remove(removeValue)}>Remove</button>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => {\n            setSearchPrefixValue(elem.currentTarget.value)\n          }}\n          placeholder=\"Search prefix\"\n        />\n        <br />\n        <button onClick={() => setData(getAllWords())}>Get all words</button>\n        <div>\n          {data.map((word) => (\n            <p key={word}>{word}</p>\n          ))}\n        </div>\n        <br />\n        <input\n          type=\"text\"\n          onChange={(elem) => {\n            setFound('Not searched')\n            setSearchValue(elem.currentTarget.value)\n          }}\n        />\n        <button onClick={() => setFound(search(searchValue) ? 'Yes' : 'No')}>\n          Search\n        </button>\n        <p>Found: {found}</p>\n        <br />\n        <button onClick={() => removeHighlight()}>Remove highlight</button>\n      </div>\n      <Trie\n        ref={ref}\n        data={['cook', 'cold', 'cap', 'cooker', 'cool']}\n        treeStyles={{ ...args }}\n      />\n    </>\n  )\n}"}},Trie_stories_AllFunctions.parameters)}},[[489,2,3]]]);